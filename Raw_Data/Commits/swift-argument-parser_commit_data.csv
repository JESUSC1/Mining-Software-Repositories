commit_id,message,author_name,author_email,author_date,author_tz,committer_name,committer_email,committer_date,committer_tz,in_main,is_merge,num_deletes,num_inserts,net_lines,num_files,branches,files,parents,dmm_unit_size,dmm_unit_complexity,dmm_unit_interfacing
f6ac7b8118ff5d1bc0faee7f37bf6f8fd8f95602,Initial import of ArgumentParser,Nate Cook,natecook@apple.com,2020-02-20 08:07:01-08:00,28800,Nate Cook,natecook@apple.com,2020-02-27 15:45:22-06:00,21600,True,False,0,11333,11333,79,main,".gitignore, CODE_OF_CONDUCT.md, CONTRIBUTING.md, Documentation/01 Getting Started.md, Documentation/02 Arguments, Options, and Flags.md, Documentation/03 Commands and Subcommands.md, Documentation/04 Customizing Help.md, Documentation/05 Validation and Errors.md, Documentation/06 Manual Parsing and Testing.md, Examples/math/main.swift, Examples/repeat/main.swift, Examples/roll/SplitMix64.swift, Examples/roll/main.swift, LICENSE.txt, Package.swift, README.md, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/ArgumentHelp.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/NameSpecification.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Sources/ArgumentParser/Parsable Properties/ValidationError.swift, Sources/ArgumentParser/Parsable Types/CommandConfiguration.swift, Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Parsing/ArgumentDecoder.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/ArgumentSetSequence.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/InputOrigin.swift, Sources/ArgumentParser/Parsing/Name.swift, Sources/ArgumentParser/Parsing/Parsed.swift, Sources/ArgumentParser/Parsing/ParsedValues.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Sources/ArgumentParser/Usage/HelpCommand.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Sources/ArgumentParser/Utilities/StringExtensions.swift, Sources/ArgumentParser/Utilities/Tree.swift, Sources/TestHelpers/StringHelpers.swift, Sources/TestHelpers/TestHelpers.swift, Tests/EndToEndTests/CustomParsingEndToEndTests.swift, Tests/EndToEndTests/DefaultsEndToEndTests.swift, Tests/EndToEndTests/EnumEndToEndTests.swift, Tests/EndToEndTests/FlagsEndToEndTests.swift, Tests/EndToEndTests/LongNameWithShortDashEndToEndTests.swift, Tests/EndToEndTests/NestedCommandEndToEndTests.swift, Tests/EndToEndTests/OptionGroupEndToEndTests.swift, Tests/EndToEndTests/OptionalEndToEndTests.swift, Tests/EndToEndTests/PositionalEndToEndTests.swift, Tests/EndToEndTests/RawRepresentableEndToEndTests.swift, Tests/EndToEndTests/RepeatingEndToEndTests.swift, Tests/EndToEndTests/ShortNameEndToEndTests.swift, Tests/EndToEndTests/SimpleEndToEndTests.swift, Tests/EndToEndTests/SingleValueParsingStrategyTests.swift, Tests/EndToEndTests/SubcommandEndToEndTests.swift, Tests/EndToEndTests/ValidationEndToEndTests.swift, Tests/ExampleTests/MathExampleTests.swift, Tests/ExampleTests/RepeatExampleTests.swift, Tests/ExampleTests/RollDiceExampleTests.swift, Tests/PackageManagerTests/HelpTests.swift, Tests/PackageManagerTests/PackageManager/Clean.swift, Tests/PackageManagerTests/PackageManager/Config.swift, Tests/PackageManagerTests/PackageManager/Describe.swift, Tests/PackageManagerTests/PackageManager/GenerateXcodeProject.swift, Tests/PackageManagerTests/PackageManager/Options.swift, Tests/PackageManagerTests/Tests.swift, Tests/UnitTests/ErrorMessageTests.swift, Tests/UnitTests/HelpGenerationTests.swift, Tests/UnitTests/NameSpecificationTests.swift, Tests/UnitTests/SplitArgumentTests.swift, Tests/UnitTests/StringWrappingTests.swift, Tests/UnitTests/TreeTests.swift, Tests/UnitTests/UsageGenerationTests.swift",,0.611394992335207,0.8518140010219724,0.9626980071538068
fe504ebee94c5ba345d3b9e0d664ee43bdb5ef37,Update links in the README,Nate Cook,natecook@apple.com,2020-02-27 17:52:20-06:00,21600,Nate Cook,natecook@apple.com,2020-02-27 17:52:20-06:00,21600,True,False,2,2,0,1,main,README.md,f6ac7b8118ff5d1bc0faee7f37bf6f8fd8f95602,,,
2773dffa284b2ecc16e71d7f07167f773ad60f6b,Remove stray backtick in the validation guide,Nate Cook,natecook@apple.com,2020-02-27 18:08:03-06:00,21600,Nate Cook,natecook@apple.com,2020-02-27 18:08:03-06:00,21600,True,False,1,1,0,1,main,Documentation/05 Validation and Errors.md,fe504ebee94c5ba345d3b9e0d664ee43bdb5ef37,,,
e17dac8424d0275d082dacf00524f2c372d50bf8,remove extra whitespace (#6),Federico Zanetello,zntfdr@gmail.com,2020-02-28 14:50:19+07:00,-25200,GitHub,noreply@github.com,2020-02-28 01:50:19-06:00,21600,True,False,1,1,0,1,main,"Documentation/02 Arguments, Options, and Flags.md",2773dffa284b2ecc16e71d7f07167f773ad60f6b,,,
f83b3d374f845da80a0ace9c8acc59a51c0e9cf3,fix requirement name,Federico Zanetello,zntfdr@gmail.com,2020-02-28 21:21:17+07:00,-25200,GitHub,noreply@github.com,2020-02-28 21:21:17+07:00,-25200,True,False,1,1,0,1,main,README.md,e17dac8424d0275d082dacf00524f2c372d50bf8,,,
60db8cc34401d26f96015c3276f62bb2d79d944f,"Merge pull request #9 from zntfdr/patch-2

Fix readme requirement name",Nate Cook,natecook@apple.com,2020-02-28 10:55:03-06:00,21600,GitHub,noreply@github.com,2020-02-28 10:55:03-06:00,21600,True,True,1,1,0,1,main,,"e17dac8424d0275d082dacf00524f2c372d50bf8, f83b3d374f845da80a0ace9c8acc59a51c0e9cf3",,,
cef6cd1fc2cb41e84c6786a7ea81a2350cf264e3,"Add link to more documentation in README (#3)

* Add link to more documentation in README

And fix inconsistency in README (declaring conformance in type declaration but only implementing the conformance in extension)

* README: Revert changes to protocol declaration order

* Fixing additional typos in documentation

* Replace using extension with ""// continued below…"" comment

* Revert contractions fixes",Olivier Halligon,olivier@halligon.net,2020-02-28 17:55:12+01:00,-3600,GitHub,noreply@github.com,2020-02-28 10:55:12-06:00,21600,True,False,5,12,7,5,main,"Documentation/01 Getting Started.md, Documentation/02 Arguments, Options, and Flags.md, Documentation/03 Commands and Subcommands.md, Documentation/04 Customizing Help.md, README.md",60db8cc34401d26f96015c3276f62bb2d79d944f,,,
d131c47155ff32ed1d63a8ff7cb9c8166cf437f7,Fixing 12 typos across 6 files. (#13),Alexander Cyon,Sajjon@users.noreply.github.com,2020-02-28 20:33:57+01:00,-3600,GitHub,noreply@github.com,2020-02-28 13:33:57-06:00,21600,True,False,12,12,0,5,main,"Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Sources/TestHelpers/TestHelpers.swift",cef6cd1fc2cb41e84c6786a7ea81a2350cf264e3,,,
339baea0a5d8c9b26c6e9be47df8e713f6e26234,Adding .xcodesamplecode.plist to give proper markdown rending inside Xcode (#12),Alexander Cyon,Sajjon@users.noreply.github.com,2020-02-28 20:34:39+01:00,-3600,GitHub,noreply@github.com,2020-02-28 13:34:39-06:00,21600,True,False,0,5,5,1,main,.xcodesamplecode.plist,d131c47155ff32ed1d63a8ff7cb9c8166cf437f7,,,
598ba07a2f9d61e34f00c289305e64cf52abb224,add parentheses after `@OptionGroup` (#19),griffin-stewie,panterathefamilyguy@gmail.com,2020-03-01 01:43:51+09:00,-32400,GitHub,noreply@github.com,2020-02-29 10:43:51-06:00,21600,True,False,2,2,0,1,main,Documentation/03 Commands and Subcommands.md,339baea0a5d8c9b26c6e9be47df8e713f6e26234,,,
8d952c8513a1b1d215c4cf821c0309abb5cf5966,"Correct docs about defaults for arguments

You can't set a default for an argument, as noted here:
https://forums.swift.org/t/default-values-documentation-doubt/34185",Nate Cook,natecook@apple.com,2020-02-29 13:19:39-06:00,21600,GitHub,noreply@github.com,2020-02-29 13:19:39-06:00,21600,True,False,1,1,0,1,main,"Documentation/02 Arguments, Options, and Flags.md",598ba07a2f9d61e34f00c289305e64cf52abb224,,,
78302023c05c9fd57e8ca17ab23cb0ce2754d538,"Remove extra space leading default value help text (#28)

When generating help text, remove non-existent segments prior to joining
with an empty space. This ensures vertical visual alignment when
description for default value is the only segment.

Closes #27",Daniel Duan,daniel@duan.ca,2020-02-29 22:56:55-08:00,28800,GitHub,noreply@github.com,2020-03-01 00:56:55-06:00,21600,True,False,3,26,23,3,main,"Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/PackageManagerTests/HelpTests.swift, Tests/UnitTests/HelpGenerationTests.swift",8d952c8513a1b1d215c4cf821c0309abb5cf5966,0.7333333333333333,0.7333333333333333,1.0
4a7aebd4ac35e50dad130366ee1aae6eed550573,Port to Android (#14),buttaface,butta@fastem.com,2020-03-01 12:29:48+05:18,-19080,GitHub,noreply@github.com,2020-03-01 01:11:48-06:00,21600,True,False,2,2,0,2,main,"Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift",78302023c05c9fd57e8ca17ab23cb0ce2754d538,,,
1d469039f44e8ae177205db2f0bab46c683e498b,"Correct docs about flag defaults with inversions

The documentation previously stated that flags with inversions are
required; they're in fact only required when their default is `nil`.",Nate Cook,natecook@gmail.com,2020-03-01 01:42:43-06:00,21600,Nate Cook,natecook@gmail.com,2020-03-01 01:42:43-06:00,21600,True,False,4,8,4,1,main,"Documentation/02 Arguments, Options, and Flags.md",4a7aebd4ac35e50dad130366ee1aae6eed550573,,,
7e25c0005f173369e52ae1bfc6edc7c76cb8d34e,"Update docs for flags with default values

It isn't currently mentioned that a `nil` default for a `Bool` flag
makes the flag a required input.",Nate Cook,natecook@gmail.com,2020-03-01 01:48:11-06:00,21600,Nate Cook,natecook@gmail.com,2020-03-01 01:48:11-06:00,21600,True,False,2,3,1,1,main,Sources/ArgumentParser/Parsable Properties/Flag.swift,1d469039f44e8ae177205db2f0bab46c683e498b,,,
0a401ef48c7afd4498e201ab015a53de302693e2,"Use EX_USAGE instead of EXIT_FAILURE for validation errors. (#15)

sysexits(3) documents the ""preferable exit codes for programs"". It
defines

```
     EX_USAGE (64)         The command was used incorrectly, e.g., with the
                           wrong number of arguments, a bad flag, a bad syntax
                           in a parameter, or whatever.
```

So it seems to be a good choice for this use case.

Glibc also defines EX_USAGE",Ingmar Stein,IngmarStein@users.noreply.github.com,2020-03-02 17:46:23+01:00,-3600,GitHub,noreply@github.com,2020-03-02 10:46:23-06:00,21600,True,False,3,10,7,2,main,"Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/MessageInfo.swift",7e25c0005f173369e52ae1bfc6edc7c76cb8d34e,0.0,0.0,0.0
6f58e68a6aa3b03bc2cbc36f340f2c12ca5775c3,"Fixed Various Grammar & Spelling Mistakes (#17)

* Corrected grammatical and spelling errors in files in Documentation.

* Correct various spelling, grammar, and formatting mistakes in code documentation.",Wildchild9,35314567+Wildchild9@users.noreply.github.com,2020-03-02 11:54:10-05:00,18000,GitHub,noreply@github.com,2020-03-02 10:54:10-06:00,21600,True,False,73,72,-1,20,main,"Documentation/01 Getting Started.md, Documentation/02 Arguments, Options, and Flags.md, Documentation/03 Commands and Subcommands.md, Documentation/05 Validation and Errors.md, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/NameSpecification.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Properties/ValidationError.swift, Sources/ArgumentParser/Parsable Types/CommandConfiguration.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/ArgumentSetSequence.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/Parsed.swift, Sources/ArgumentParser/Parsing/ParsedValues.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift",0a401ef48c7afd4498e201ab015a53de302693e2,,,
e21b10e5c27da53ba03a2771763b87a49297a465,Stop filtering out default values for Bools in HelpGenerator. (#30),Šimon Javora,s.javora@me.com,2020-03-02 18:04:59+01:00,-3600,GitHub,noreply@github.com,2020-03-02 11:04:59-06:00,21600,True,False,5,26,21,2,main,"Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/UnitTests/HelpGenerationTests.swift",6f58e68a6aa3b03bc2cbc36f340f2c12ca5775c3,1.0,1.0,1.0
fd5b49c8dcd5084c65f622cfb253ed50f72321d1,"Provide suggestions for unknown options (#10)

* Add String#editDistance(to:)

Uses levenshtein distance to determine how much two strings differ.

See: https://en.wikipedia.org/wiki/Levenshtein_distance

* Simplify unknownOptionMessage

The logic of Name#synopsisString was repeated in unknownOptionMessage.
This change sit so that unknownOptionMessage defer to Name's
implementation instead.

* Provide suggestions for unknown options",Klaas Pieter Annema,kp@annema.me,2020-03-02 18:21:03+01:00,-3600,GitHub,noreply@github.com,2020-03-02 11:21:03-06:00,21600,True,False,12,137,125,5,main,"Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Sources/ArgumentParser/Utilities/StringExtensions.swift, Tests/UnitTests/ErrorMessageTests.swift, Tests/UnitTests/StringEditDistanceTests.swift",e21b10e5c27da53ba03a2771763b87a49297a465,0.028985507246376812,0.028985507246376812,1.0
8a23e0b3a47a4187cdb994f50010f2982b650a66,"Update 06 Manual Parsing and Testing.md (#40)

`ParsableCommand.parseAsRoot()` drops the first item from `CommandLine.arguments` when it receives a `nil` array as a parameter, so it is necessary to do the same before pre-processing arguments to feed to any `ParsableCommand`.",Guillaume Lessard,glessard@users.noreply.github.com,2020-03-02 10:23:12-07:00,25200,GitHub,noreply@github.com,2020-03-02 11:23:12-06:00,21600,True,False,1,1,0,1,main,Documentation/06 Manual Parsing and Testing.md,fd5b49c8dcd5084c65f622cfb253ed50f72321d1,,,
49893948c28aa16deefa3b861a238512d79bb984,"Update 04 Customizing Help.md (#38)

fix typo in code example to configure the help flags.",Guillaume Lessard,glessard@users.noreply.github.com,2020-03-02 10:23:31-07:00,25200,GitHub,noreply@github.com,2020-03-02 11:23:31-06:00,21600,True,False,2,2,0,1,main,Documentation/04 Customizing Help.md,8a23e0b3a47a4187cdb994f50010f2982b650a66,,,
4d2be9002754ec5a384b7a05fad3793424c994f5,Remove code the compiler can generate on its own. Removed `public` annotations nested inside internal types. (#22),Šimon Javora,s.javora@me.com,2020-03-02 18:25:07+01:00,-3600,GitHub,noreply@github.com,2020-03-02 11:25:07-06:00,21600,True,False,47,7,-40,3,main,"Sources/ArgumentParser/Parsing/Name.swift, Sources/ArgumentParser/Parsing/ParsedValues.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift",49893948c28aa16deefa3b861a238512d79bb984,0.0,0.0,0.3235294117647059
4d57c8c43ff5107e634a55b85bf53c674d06d24c,Fix failing math example test,Nate Cook,natecook@apple.com,2020-03-02 14:47:08-06:00,21600,Nate Cook,natecook@apple.com,2020-03-02 14:47:08-06:00,21600,True,False,1,1,0,1,main,Tests/ExampleTests/MathExampleTests.swift,4d2be9002754ec5a384b7a05fad3793424c994f5,,,
c916dbd63e2df859b30877d2053f06c60278fcdd,"port to Windows (#42)

This adjusts the imports to enable building for Windows.

The major change here is that `_terminalHeight` and `_terminalWidth`
have been merged into a `_terminalSize` which returns a tuple of the
width and the height.  This is then implemented for Windows as well.",Saleem Abdulrasool,compnerd@compnerd.org,2020-03-02 12:51:11-08:00,28800,GitHub,noreply@github.com,2020-03-02 14:51:11-06:00,21600,True,False,12,22,10,2,main,"Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift",4d57c8c43ff5107e634a55b85bf53c674d06d24c,0.0,1.0,1.0
49edf191eeb0b734c48827971e0c1ac0db16a9d8,gitignore: ignore vim swapfiles (#43),Saleem Abdulrasool,compnerd@compnerd.org,2020-03-02 12:51:39-08:00,28800,GitHub,noreply@github.com,2020-03-02 14:51:39-06:00,21600,True,False,0,1,1,1,main,.gitignore,c916dbd63e2df859b30877d2053f06c60278fcdd,,,
b9eb417354dc3e7d7fcbad2d8a63c90cc8ce1a56,"build: add a CMake based build for Windows (#44)

Since swift-package-manager doesn't work on Windows yet, add a CMake
based build system.",Saleem Abdulrasool,compnerd@compnerd.org,2020-03-02 14:26:31-08:00,28800,GitHub,noreply@github.com,2020-03-02 16:26:31-06:00,21600,True,False,0,131,131,12,main,"CMakeLists.txt, Examples/CMakeLists.txt, Examples/math/CMakeLists.txt, Examples/repeat/CMakeLists.txt, Examples/roll/CMakeLists.txt, Sources/ArgumentParser/CMakeLists.txt, Sources/CMakeLists.txt, Sources/TestHelpers/CMakeLists.txt, Tests/CMakeLists.txt, Tests/EndToEndTests/CMakeLists.txt, Tests/PackageManagerTests/CMakeLists.txt, Tests/UnitTests/CMakeLists.txt",49edf191eeb0b734c48827971e0c1ac0db16a9d8,,,
9e86019f968d594988dd7da5304e63f985bb5a01,treat empty strings and nil strings the same way in help output (#47),Guillaume Lessard,glessard@users.noreply.github.com,2020-03-02 15:58:47-07:00,25200,GitHub,noreply@github.com,2020-03-02 16:58:47-06:00,21600,True,False,2,8,6,2,main,"Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/UnitTests/HelpGenerationTests.swift",b9eb417354dc3e7d7fcbad2d8a63c90cc8ce1a56,1.0,1.0,1.0
a1d6e00c614284aa3d9e69558f5c36d8bd94fe36,"Fix usage message for subcommand validation errors

When a validation error is thrown from a subcommand, we aren't correctly
including the command stack, so only the root command's usage is shown.
This bundles the validation error together with the command stack so the
error message has all the context it needs.",Nate Cook,natecook@apple.com,2020-03-02 17:15:31-06:00,21600,Nate Cook,natecook@apple.com,2020-03-02 17:15:31-06:00,21600,True,False,2,20,18,3,main,"Examples/math/main.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Tests/ExampleTests/MathExampleTests.swift",9e86019f968d594988dd7da5304e63f985bb5a01,1.0,1.0,1.0
6b3a0a12a3e8f7f8bedf77f8d6e99df7891dfcd7,Clean up `InputOrigin` by removing unused code. (#21),Šimon Javora,s.javora@me.com,2020-03-03 19:54:15+01:00,-3600,GitHub,noreply@github.com,2020-03-03 12:54:15-06:00,21600,True,False,36,9,-27,2,main,"Sources/ArgumentParser/Parsing/InputOrigin.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift",a1d6e00c614284aa3d9e69558f5c36d8bd94fe36,0.6304347826086957,0.6304347826086957,0.0
53a00f51fbd1ebe6dffc78e062e904847a762e22,"Pass information to ParserError in order to show user a better error message (#52)

* revert some of the cleanup from 6b3a0a1

* Pass information to ParserError to diagnose mutually exclusive flags",Guillaume Lessard,glessard@users.noreply.github.com,2020-03-04 10:24:27-07:00,25200,GitHub,noreply@github.com,2020-03-04 11:24:27-06:00,21600,True,False,7,50,43,5,main,"Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsing/InputOrigin.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/UnitTests/ErrorMessageTests.swift",6b3a0a12a3e8f7f8bedf77f8d6e99df7891dfcd7,1.0,1.0,1.0
9ebf401d274c4ef0a634cd4c4494b4a63f12baaf,"Add support for exiting without printing an error. (#51)

This adds an `ExitCode` error type that stores an exit code,
and updates the exit machinery to (1) use `ExitCode` as the source
for exit codes, and (2) silently exit when the provided error
is an `ExitCode` instance.",Nate Cook,natecook@apple.com,2020-03-04 13:10:28-06:00,21600,GitHub,noreply@github.com,2020-03-04 13:10:28-06:00,21600,True,False,34,166,132,11,main,"Documentation/05 Validation and Errors.md, Examples/math/main.swift, Sources/ArgumentParser/CMakeLists.txt, Sources/ArgumentParser/Parsable Properties/Errors.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/TestHelpers/TestHelpers.swift, Tests/EndToEndTests/ValidationEndToEndTests.swift, Tests/ExampleTests/MathExampleTests.swift, Tests/ExampleTests/RepeatExampleTests.swift, Tests/ExampleTests/RollDiceExampleTests.swift",53a00f51fbd1ebe6dffc78e062e904847a762e22,0.0,0.5370370370370371,1.0
7ac45d6828e58005621cf51b2a0b3f1e0cda3e3d,"[Github] Adding templates for ISSUE & PRs and environment script (#53)

* Adding script to read out users environment, useful when user creates issues. Adding .github folder with templates for issues and Pull Requests.

* Streamline the issue and pull request templates a bit

Co-authored-by: Nate Cook <natecook@apple.com>",Nate Cook,natecook@apple.com,2020-03-05 14:56:52-06:00,21600,GitHub,noreply@github.com,2020-03-05 14:56:52-06:00,21600,True,False,0,144,144,6,main,".github/ISSUE_TEMPLATE/BUG_REPORT.md, .github/ISSUE_TEMPLATE/FEATURE_REQUEST.md, .github/ISSUE_TEMPLATE/config.yml, .github/PULL_REQUEST_TEMPLATE.md, .github/PULL_REQUEST_TEMPLATE/NEW.md, Scripts/environment.sh",9ebf401d274c4ef0a634cd4c4494b4a63f12baaf,,,
58660b05c444b6916df980e7ad1e8f047cf14977,Add a changelog,Nate Cook,natecook@apple.com,2020-03-04 11:11:52-06:00,21600,Nate Cook,natecook@apple.com,2020-03-05 15:15:37-06:00,21600,True,False,0,44,44,1,main,CHANGELOG.md,7ac45d6828e58005621cf51b2a0b3f1e0cda3e3d,,,
2d256de11c3f0a9b2d912a6c9556a6aef3379ec4,"Add @Flag initializer for Optional<Bool> (#54)

* Add @Flag initializer for Optional<Bool>

Per [discussion][], add an initializer for `Flag<Optional<Bool>>` that
allows the default value to be `nil`, enabling capacity to distinguish
the lack of a supplied flag vs the default value from user.

[discussion]: https://forums.swift.org/t/flag-default-value-where-did-it-come-from/34204/10

* fixup! Add @Flag initializer for Optional<Bool>",Daniel Duan,daniel@duan.ca,2020-03-05 23:58:03-08:00,28800,GitHub,noreply@github.com,2020-03-06 01:58:03-06:00,21600,True,False,0,41,41,2,main,"Sources/ArgumentParser/Parsable Properties/Flag.swift, Tests/EndToEndTests/FlagsEndToEndTests.swift",58660b05c444b6916df980e7ad1e8f047cf14977,0.0,1.0,1.0
b3a77c4dc79c3017c4f5d1d4016c8d36d4258faa,fix for help output of groups of flags (#55),Guillaume Lessard,glessard@users.noreply.github.com,2020-03-06 01:19:57-07:00,25200,GitHub,noreply@github.com,2020-03-06 02:19:57-06:00,21600,True,False,6,66,60,2,main,"Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/UnitTests/HelpGenerationTests.swift",2d256de11c3f0a9b2d912a6c9556a6aef3379ec4,0.0,0.6428571428571429,1.0
77ad487e3da8aa2eebc33b8e8d27893dd4118403,output default value in help for Flags built from CaseIterable enums (#63),Guillaume Lessard,glessard@users.noreply.github.com,2020-03-06 09:07:28-07:00,25200,GitHub,noreply@github.com,2020-03-06 10:07:28-06:00,21600,True,False,4,10,6,2,main,"Sources/ArgumentParser/Parsable Properties/Flag.swift, Tests/UnitTests/HelpGenerationTests.swift",b3a77c4dc79c3017c4f5d1d4016c8d36d4258faa,1.0,1.0,1.0
d8fb6bdd63fa541e0ea52a99556093e1c3a60586,"Rename TestHelpers to SAPTestHelpers

Before version 5.2, target names need to be unique in the package
dependency graph. TestHelpers causes a conflict with SE0270_RangeSet,
and possibly others, so renaming. Fixes #18.",Nate Cook,natecook@apple.com,2020-03-06 10:17:04-06:00,21600,Nate Cook,natecook@apple.com,2020-03-06 10:17:04-06:00,21600,True,False,29,29,0,28,main,"Package.swift, Sources/SAPTestHelpers/CMakeLists.txt, Sources/SAPTestHelpers/StringHelpers.swift, Sources/SAPTestHelpers/TestHelpers.swift, Tests/EndToEndTests/CustomParsingEndToEndTests.swift, Tests/EndToEndTests/DefaultsEndToEndTests.swift, Tests/EndToEndTests/EnumEndToEndTests.swift, Tests/EndToEndTests/FlagsEndToEndTests.swift, Tests/EndToEndTests/LongNameWithShortDashEndToEndTests.swift, Tests/EndToEndTests/NestedCommandEndToEndTests.swift, Tests/EndToEndTests/OptionGroupEndToEndTests.swift, Tests/EndToEndTests/OptionalEndToEndTests.swift, Tests/EndToEndTests/PositionalEndToEndTests.swift, Tests/EndToEndTests/RawRepresentableEndToEndTests.swift, Tests/EndToEndTests/RepeatingEndToEndTests.swift, Tests/EndToEndTests/ShortNameEndToEndTests.swift, Tests/EndToEndTests/SimpleEndToEndTests.swift, Tests/EndToEndTests/SingleValueParsingStrategyTests.swift, Tests/EndToEndTests/SubcommandEndToEndTests.swift, Tests/EndToEndTests/ValidationEndToEndTests.swift, Tests/ExampleTests/MathExampleTests.swift, Tests/ExampleTests/RepeatExampleTests.swift, Tests/ExampleTests/RollDiceExampleTests.swift, Tests/PackageManagerTests/HelpTests.swift, Tests/PackageManagerTests/Tests.swift, Tests/UnitTests/ErrorMessageTests.swift, Tests/UnitTests/HelpGenerationTests.swift, Tests/UnitTests/SplitArgumentTests.swift",77ad487e3da8aa2eebc33b8e8d27893dd4118403,,,
3af071f5667dbada4886fb32ddd3a9578bf719db,add control of exclusivity for Bool Flags when inversion is enabled (#62),Guillaume Lessard,glessard@users.noreply.github.com,2020-03-06 11:37:47-07:00,25200,GitHub,noreply@github.com,2020-03-06 12:37:47-06:00,21600,True,False,27,52,25,4,main,"Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/EndToEndTests/FlagsEndToEndTests.swift, Tests/UnitTests/ErrorMessageTests.swift",d8fb6bdd63fa541e0ea52a99556093e1c3a60586,0.0,1.0,1.0
7f5984a29bf6fa0bd158c3e7e8f39fa31a5f062e,make FlagExclusivity.chooseFirst work (#67),Guillaume Lessard,glessard@users.noreply.github.com,2020-03-06 15:33:53-07:00,25200,GitHub,noreply@github.com,2020-03-06 16:33:53-06:00,21600,True,False,6,29,23,2,main,"Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/EndToEndTests/FlagsEndToEndTests.swift",3af071f5667dbada4886fb32ddd3a9578bf719db,0.7692307692307693,1.0,1.0
b5426db472c9189270e2705ebfe7f972f3eca299,"Fix duplicate options showing up in command help output (#68)

When using option groups to bring options into subcommands that are also
used in parent commands, the help system duplicates the options in the
generated output.

For instance, in the `SubcommandEndToEndTest` example, the `--name`
argument is listed twice for both the subcommands `CommandA` and
`CommandB`, and expected by the test assertion.

It is annoying in a simple case like this but causes a lot of unhelpful
noise in help output when you share more and more options across a
command heirarchy.

To solve this we need to keep track of what
`HelpGenerator.Section.Element` values have already been processed from
parent commands in the command stack. I acheived this by making
`Element` conform to `Hashable` to track in a `Set`.

This assumes that we don't need to support re-using command names up and
down a command heirarchy. It doesn't work at all today (you get an error
when trying to use the exact same option in a parent and child
command). If we choose to support this eventually then we'll need to
augment this solution to keep track of where the `Element` was generated
in the heirarchy.

This also updates the test to properly assert that the `--name` option
is only output once for the subcommands in `SubcommandEndToEndTest`.",Jonathan Penn,jonathan@wavethenavel.com,2020-03-06 18:20:40-05:00,18000,GitHub,noreply@github.com,2020-03-06 17:20:40-06:00,21600,True,False,8,11,3,2,main,"Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/EndToEndTests/SubcommandEndToEndTests.swift",7f5984a29bf6fa0bd158c3e7e8f39fa31a5f062e,0.0,0.0,1.0
5060e5521a34272016584ff1ed53dc5764a411a6,"Revert adding environment.sh

This was Sajjon's contribution!",Nate Cook,natecook@apple.com,2020-03-06 17:26:28-06:00,21600,Nate Cook,natecook@apple.com,2020-03-06 17:26:28-06:00,21600,True,False,36,0,-36,1,main,,b5426db472c9189270e2705ebfe7f972f3eca299,,,
49dc6b1841a494104336157c6d208a831550e9b4,Add a script for copying environment information,Alexander Cyon,Sajjon@users.noreply.github.com,2020-03-06 17:30:02-06:00,21600,Nate Cook,natecook@apple.com,2020-03-06 17:31:22-06:00,21600,True,False,0,37,37,1,main,Scripts/environment.sh,5060e5521a34272016584ff1ed53dc5764a411a6,,,
35b76bf577d3cc74820f8991894ce3bcdf024ddc,Update CHANGELOG for version 0.0.2,Nate Cook,natecook@apple.com,2020-03-06 17:36:57-06:00,21600,Nate Cook,natecook@apple.com,2020-03-06 17:36:57-06:00,21600,True,False,2,42,40,1,main,CHANGELOG.md,49dc6b1841a494104336157c6d208a831550e9b4,,,
be65f492ba72b7a08805bbb2cd1e3e064fbc3be8,"Minor revisions to the README

Fixes #7",Nate Cook,natecook@apple.com,2020-03-06 23:51:00-06:00,21600,Nate Cook,natecook@apple.com,2020-03-06 23:51:00-06:00,21600,True,False,24,21,-3,1,main,README.md,35b76bf577d3cc74820f8991894ce3bcdf024ddc,,,
215a8bfab721de246c300ee5cc09f796663deb3c,"CMake adjustments (#69)

* build: update cmake for TestHelpers rename

* build: make CMake build on macOS work

Unfortunately, XCTest importing is not working for some reason
currently.  However, this allows you to build on Darwin as follows:

```
cmake -G Ninja -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTING=NO -S . -B out
ninja -C out
```

Windows and Linux builds remain functional.

* build: refactor Examples build with CMake

Although this goes contrary to best practices for CMake, this helps keep
the source tree a bit leaner for the Examples.",Saleem Abdulrasool,compnerd@compnerd.org,2020-03-09 08:26:49-07:00,25200,GitHub,noreply@github.com,2020-03-09 10:26:49-05:00,18000,True,False,23,22,-1,9,main,"Examples/CMakeLists.txt, Sources/ArgumentParser/CMakeLists.txt, Sources/CMakeLists.txt, Sources/SAPTestHelpers/CMakeLists.txt, Tests/EndToEndTests/CMakeLists.txt, Tests/UnitTests/CMakeLists.txt",be65f492ba72b7a08805bbb2cd1e3e064fbc3be8,,,
fa538c256024a722e092539b5d47f6094d21cf90,Gardening: make environment.sh executable (#72),Iain Smith,iainsmith@users.noreply.github.com,2020-03-09 15:36:19+00:00,0,GitHub,noreply@github.com,2020-03-09 10:36:19-05:00,18000,True,False,0,0,0,1,main,Scripts/environment.sh,215a8bfab721de246c300ee5cc09f796663deb3c,,,
1e05511552fed58f45a764b0b0ac1296cdb4495f,"Add a catch-all argument parsing strategy (#29)

* Add a catch-all argument parsing strategy

We don't currently have a way for `@Argument` arrays to capture
command-line inputs that look like options. This capability is
important for tools like SwiftPM that need to forward input to
another command.

This introduces an `ArgumentArrayParsingStrategy` enum with a
`remaining` case that  matches the current behavior, as well as an
`unconditionalRemaining` case that captures all remaining input. The
two array-based `@Argument` initializers gain defaulted parameters for
the parsing strategy.

* Address feedback from @danieleggert

- Added a bit of a warning for the unconditional parsing strategy
- Switched to a better way of getting the original input
- Changed to pulling the ""earliest"" element when combining positional and
  unused values, rather than combining and sorting. This felt more
  efficient than reconstructing a SplitArguments instance or combining
  and sorting.

* Add parameter docs for argument parsing strategy

* Expand documentation and tests to cover `--` terminator

* Fix case name in API documentation",Nate Cook,natecook@apple.com,2020-03-09 17:12:42-05:00,18000,GitHub,noreply@github.com,2020-03-09 17:12:42-05:00,18000,True,False,42,229,187,5,main,"Documentation/02 Arguments, Options, and Flags.md, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Tests/EndToEndTests/RepeatingEndToEndTests.swift",fa538c256024a722e092539b5d47f6094d21cf90,0.13333333333333333,1.0,0.0
34300696f55ce2d1a845ac63c454a8419877d765,"Prefix test target names with ""ArgumentParser"" (#74)

* Prefix testing and test helper targets with ArgumentParser

* Replace SAP with ArgumentParser in imports and CMakeLists",Elliott Williams,emw@yelp.com,2020-03-09 11:23:44-07:00,25200,Nate Cook,natecook@apple.com,2020-03-10 12:44:07-05:00,18000,True,False,48,48,0,44,main,"Package.swift, Sources/ArgumentParserTestHelpers/CMakeLists.txt, Sources/ArgumentParserTestHelpers/StringHelpers.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Sources/CMakeLists.txt, Tests/ArgumentParserEndToEndTests/CMakeLists.txt, Tests/ArgumentParserEndToEndTests/CustomParsingEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/DefaultsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/EnumEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/FlagsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/LongNameWithShortDashEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/NestedCommandEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/OptionGroupEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/OptionalEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/PositionalEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/RawRepresentableEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/RepeatingEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/ShortNameEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/SimpleEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/SingleValueParsingStrategyTests.swift, Tests/ArgumentParserEndToEndTests/SubcommandEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/ValidationEndToEndTests.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserExampleTests/RepeatExampleTests.swift, Tests/ArgumentParserExampleTests/RollDiceExampleTests.swift, Tests/ArgumentParserPackageManagerTests/CMakeLists.txt, Tests/ArgumentParserPackageManagerTests/HelpTests.swift, Tests/ArgumentParserPackageManagerTests/PackageManager/Clean.swift, Tests/ArgumentParserPackageManagerTests/PackageManager/Config.swift, Tests/ArgumentParserPackageManagerTests/PackageManager/Describe.swift, Tests/ArgumentParserPackageManagerTests/PackageManager/GenerateXcodeProject.swift, Tests/ArgumentParserPackageManagerTests/PackageManager/Options.swift, Tests/ArgumentParserPackageManagerTests/Tests.swift, Tests/ArgumentParserUnitTests/CMakeLists.txt, Tests/ArgumentParserUnitTests/ErrorMessageTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift, Tests/ArgumentParserUnitTests/NameSpecificationTests.swift, Tests/ArgumentParserUnitTests/SplitArgumentTests.swift, Tests/ArgumentParserUnitTests/StringEditDistanceTests.swift, Tests/ArgumentParserUnitTests/StringWrappingTests.swift, Tests/ArgumentParserUnitTests/TreeTests.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift, Tests/CMakeLists.txt",1e05511552fed58f45a764b0b0ac1296cdb4495f,,,
39616cbbf90142a5ab40a5c86d84c19db8a82463,"Constrain `ExpressibleByArgument` implementation for `LosslessStringConvertible`. (#58)

This extension provides default implementation for `ExpressibleByArgument` to types conforming to `LosslessStringConvertible`.
It should be restricted only to ones that wants to conform to `ExpressibleByArgument`.",@Lantua,Lantua@users.noreply.github.com,2020-03-10 19:56:12-04:00,14400,GitHub,noreply@github.com,2020-03-10 18:56:12-05:00,18000,True,False,1,1,0,1,main,Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift,34300696f55ce2d1a845ac63c454a8419877d765,,,
bbe4ec142bf3b7f5553a02c2d5026572ceacd365,"accept repeated values from mutually-exclusive flag sets (#71)

- this is equivalent to saying the same thing twice, as opposed
  to contradicting oneself.",Guillaume Lessard,glessard@users.noreply.github.com,2020-03-10 21:34:00-06:00,21600,GitHub,noreply@github.com,2020-03-10 22:34:00-05:00,18000,True,False,16,27,11,3,main,"Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserEndToEndTests/FlagsEndToEndTests.swift",39616cbbf90142a5ab40a5c86d84c19db8a82463,0.7272727272727273,1.0,1.0
164f9a71ec5fbac2df2962e4af83c885a2588c0b,Update changelog,Nate Cook,natecook@apple.com,2020-03-10 22:51:20-05:00,18000,Nate Cook,natecook@apple.com,2020-03-10 22:51:20-05:00,18000,True,False,1,12,11,1,main,CHANGELOG.md,bbe4ec142bf3b7f5553a02c2d5026572ceacd365,,,
747d6e57485df49043c75bb22350195a80cf4b0e,"Add support for default Argument value (#75)

* Add support for default Argument value

* Add test code

* Fix documentation

Now `argument` have default parameter as well.

* Add missing comma

Co-Authored-By: Nate Cook <natecook@apple.com>

* Add missing colon

Co-Authored-By: Nate Cook <natecook@apple.com>

* Add UsageGenerationTests

Co-authored-by: Nate Cook <natecook@apple.com>",griffin-stewie,panterathefamilyguy@gmail.com,2020-03-12 14:28:33+09:00,-32400,GitHub,noreply@github.com,2020-03-12 00:28:33-05:00,18000,True,False,5,54,49,4,main,"Documentation/02 Arguments, Options, and Flags.md, Sources/ArgumentParser/Parsable Properties/Argument.swift, Tests/ArgumentParserEndToEndTests/DefaultsEndToEndTests.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",164f9a71ec5fbac2df2962e4af83c885a2588c0b,0.14814814814814814,1.0,1.0
59d36639e88dc5e3da08e22b11d1356ce945bdff,Add a test for defaulted argument help,Nate Cook,natecook@apple.com,2020-03-12 00:58:19-05:00,18000,Nate Cook,natecook@apple.com,2020-03-12 00:58:19-05:00,18000,True,False,1,6,5,1,main,Tests/ArgumentParserUnitTests/HelpGenerationTests.swift,747d6e57485df49043c75bb22350195a80cf4b0e,0.0,1.0,1.0
ebb9a45751baf07e6fa0973f37925a34bf1a1408,"Fix ParsableArguments sharing between cmds & subcommands (#78)

Previously, we were only storing full-decoded ParsableCommand instances
for subcommands to pick up with the @OptionGroup() wrapper. This change
stores all decoded @OptionGroup() values as well, so that they can be
shared from super- to subcommand.",Nate Cook,natecook@apple.com,2020-03-12 11:33:25-05:00,18000,GitHub,noreply@github.com,2020-03-12 11:33:25-05:00,18000,True,False,16,89,73,4,main,"Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Sources/ArgumentParser/Parsing/ArgumentDecoder.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Tests/ArgumentParserEndToEndTests/NestedCommandEndToEndTests.swift",59d36639e88dc5e3da08e22b11d1356ce945bdff,0.0,1.0,1.0
c5263709064113253bb71d94fd27f7afe522f382,Fix a missed parameter rename,Nate Cook,natecook@apple.com,2020-03-12 11:36:03-05:00,18000,Nate Cook,natecook@apple.com,2020-03-12 11:36:03-05:00,18000,True,False,1,1,0,1,main,Sources/ArgumentParser/Parsing/CommandParser.swift,ebb9a45751baf07e6fa0973f37925a34bf1a1408,,,
28b51d494523ac8efe574739ac1e8059c31d8088,Don't show Optional(x) when displaying default values in help. (#48),Šimon Javora,s.javora@me.com,2020-03-12 17:37:02+01:00,-3600,GitHub,noreply@github.com,2020-03-12 11:37:02-05:00,18000,True,False,2,20,18,3,main,"Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",c5263709064113253bb71d94fd27f7afe522f382,0.0,1.0,1.0
9af92b684e0ea28173cb92fa4874e82944dcfb98,remove side-effects from run() in help command (#73),Miguel Ángel Díaz,madiaz.dev@gmail.com,2020-03-13 19:53:08+01:00,-3600,GitHub,noreply@github.com,2020-03-13 13:53:08-05:00,18000,True,False,2,2,0,1,main,Sources/ArgumentParser/Usage/HelpCommand.swift,28b51d494523ac8efe574739ac1e8059c31d8088,,,
12941604a7cd6c31555b014ce3f5f8348a51564a,"Fix optional argument is listed as mandatory (#77)

* Check if there is an initial value and decide whether it is optional or not

* Add UsageGenerationTests

* Add help test

* Fix redundant test code

* Add default value on help message",griffin-stewie,panterathefamilyguy@gmail.com,2020-03-14 03:55:38+09:00,-32400,GitHub,noreply@github.com,2020-03-13 13:55:38-05:00,18000,True,False,3,48,45,3,main,"Sources/ArgumentParser/Parsable Properties/Option.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",9af92b684e0ea28173cb92fa4874e82944dcfb98,0.9629629629629629,1.0,1.0
2f7e13ae2ac0547c5fc71ee3bd5be13667574dd7,"Simplify the implementation of String.convertedToSnakeCase (#81)

* Add tests for String.convertedToSnakeCase

* Simplify the implementation of String.convertedToSnakeCase",Yu Ao,YuAo@users.noreply.github.com,2020-03-16 22:41:24+08:00,-28800,GitHub,noreply@github.com,2020-03-16 09:41:24-05:00,18000,True,False,47,121,74,3,main,"Sources/ArgumentParser/Utilities/StringExtensions.swift, Tests/ArgumentParserUnitTests/CMakeLists.txt, Tests/ArgumentParserUnitTests/StringSnakeCaseTests.swift",12941604a7cd6c31555b014ce3f5f8348a51564a,0.0,1.0,1.0
46464fd2e225193cda964494479e76c3d2c4a842,"Improve help generation when command abstract is empty (#86)

* Improve help generation when command abstract is empty

* Add more help generation tests for options and arguments",Yu Ao,YuAo@users.noreply.github.com,2020-03-17 00:12:38+08:00,-28800,GitHub,noreply@github.com,2020-03-16 11:12:38-05:00,18000,True,False,10,73,63,2,main,"Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",2f7e13ae2ac0547c5fc71ee3bd5be13667574dd7,0.0,1.0,1.0
da56110041afb5514694598e597939d2c886e603,"Add LinuxMain.swift with helpful error

Resolves #85.",Nate Cook,natecook@apple.com,2020-03-17 10:53:46-05:00,18000,Nate Cook,natecook@apple.com,2020-03-17 10:53:46-05:00,18000,True,False,0,12,12,1,main,Tests/LinuxMain.swift,46464fd2e225193cda964494479e76c3d2c4a842,,,
b01be8e51a7a49e48b60c97d01574ebbc1e4b7dc,Fix subheaders in guide 2,Nate Cook,natecook@apple.com,2020-03-17 10:54:42-05:00,18000,Nate Cook,natecook@apple.com,2020-03-17 10:54:42-05:00,18000,True,False,3,3,0,1,main,"Documentation/02 Arguments, Options, and Flags.md",da56110041afb5514694598e597939d2c886e603,,,
4ac7d890e5732fdc770ba1a6e6a9454f3c63c0e6,Fix tests so that they build with Linux test discovery,Nate Cook,natecook@apple.com,2020-03-17 11:15:26-05:00,18000,Nate Cook,natecook@apple.com,2020-03-17 11:15:26-05:00,18000,True,False,4,4,0,2,main,"Tests/ArgumentParserEndToEndTests/DefaultsEndToEndTests.swift, Tests/LinuxMain.swift",b01be8e51a7a49e48b60c97d01574ebbc1e4b7dc,,,
454821303dd0995fa0eb18f848612f51260182a3,Improve some error messages,Nate Cook,natecook@apple.com,2020-03-17 11:40:15-05:00,18000,Nate Cook,natecook@apple.com,2020-03-17 11:40:15-05:00,18000,True,False,5,26,21,6,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Tests/LinuxMain.swift",4ac7d890e5732fdc770ba1a6e6a9454f3c63c0e6,,,
81b8064dbd99cf75a4734fa64efe5e680d0b4d9c,Update changelog,Nate Cook,natecook@apple.com,2020-03-17 13:39:12-05:00,18000,Nate Cook,natecook@apple.com,2020-03-17 13:39:12-05:00,18000,True,False,0,13,13,1,main,CHANGELOG.md,454821303dd0995fa0eb18f848612f51260182a3,,,
2d8a9bd1badfcf33fa96534d8db93c09d7884c72,Fix a typo in README (#89),Yu Ao,YuAo@users.noreply.github.com,2020-03-19 00:29:33+08:00,-28800,GitHub,noreply@github.com,2020-03-18 11:29:33-05:00,18000,True,False,1,1,0,1,main,README.md,81b8064dbd99cf75a4734fa64efe5e680d0b4d9c,,,
9e77589d8532789635dc06e9ffce0280e2ca83d1,"Don't repeat single-dash arguments with unconditionalRemaining arrays (#95)

This fixes #88.",Nate Cook,natecook@apple.com,2020-03-20 13:23:49-05:00,18000,GitHub,noreply@github.com,2020-03-20 13:23:49-05:00,18000,True,False,32,64,32,3,main,"Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Tests/ArgumentParserEndToEndTests/RepeatingEndToEndTests.swift",2d8a9bd1badfcf33fa96534d8db93c09d7884c72,0.17391304347826086,0.6956521739130435,1.0
ddc828f8cb6b60600cf7360376838621eaa466e1,"Add an API for converting an error to an exit code (#79)

* Add an API for converting an error to an exit code

* Make ExitCode more useful as a value type

* Update tests to use ExitCode values

* Typo fix

* Add a test for ExitCode.isSuccess

* Switch to just using ExitCode for tests",Nate Cook,natecook@apple.com,2020-03-21 12:44:32-05:00,18000,GitHub,noreply@github.com,2020-03-21 12:44:32-05:00,18000,True,False,24,98,74,8,main,"Sources/ArgumentParser/Parsable Properties/Errors.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserExampleTests/RepeatExampleTests.swift, Tests/ArgumentParserExampleTests/RollDiceExampleTests.swift, Tests/ArgumentParserUnitTests/ExitCodeTests.swift",9e77589d8532789635dc06e9ffce0280e2ca83d1,1.0,1.0,1.0
72fb0b168c5f97b00a80721cd86d229ee04d90b3,"Enforce that options must be used by command before matching a subcommand (#96)

We were incorrectly skipping over dash-prefixed inputs when looking for the next
subcommand. This means that input like `command sub1 --foo sub2` would match the
sub1 and sub2 subcommands, even if `--foo` wasn't defined by sub1. This manifested
in issues where a value expected by `--foo` would be eaten by the subcommand matcher.

Fixes #92.",Nate Cook,natecook@apple.com,2020-03-22 13:27:13-05:00,18000,GitHub,noreply@github.com,2020-03-22 13:27:13-05:00,18000,True,False,30,96,66,3,main,"Sources/ArgumentParser/Parsing/CommandParser.swift, Tests/ArgumentParserEndToEndTests/DefaultSubcommandEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/NestedCommandEndToEndTests.swift",ddc828f8cb6b60600cf7360376838621eaa466e1,1.0,1.0,1.0
e37198976f726e9bf12ac71f3031e90131013f6c,Add support for customizing default value string displayed in Help (#87) (#94),griffin-stewie,panterathefamilyguy@gmail.com,2020-03-23 03:30:11+09:00,-32400,GitHub,noreply@github.com,2020-03-22 13:30:11-05:00,18000,True,False,2,27,25,2,main,"Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",72fb0b168c5f97b00a80721cd86d229ee04d90b3,0.0,1.0,1.0
ab0f98fe241c04b5a1e91ead9521bdaab0094c9b,Use the customization point for Optional default values in help,Nate Cook,natecook@apple.com,2020-03-22 13:54:38-05:00,18000,Nate Cook,natecook@apple.com,2020-03-22 13:54:38-05:00,18000,True,False,14,13,-1,1,main,Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift,e37198976f726e9bf12ac71f3031e90131013f6c,,,
14c7622293ffbb7a235e896e37adf7eb089884a3,Update CHANGELOG for version 0.0.3,Nate Cook,natecook@apple.com,2020-03-22 19:03:38-05:00,18000,Nate Cook,natecook@apple.com,2020-03-22 19:03:38-05:00,18000,True,False,1,19,18,1,main,CHANGELOG.md,ab0f98fe241c04b5a1e91ead9521bdaab0094c9b,,,
d875544e9638843e9256c824764cd94ee584b366,"Remove usage of 5.2-only syntax.

Fixes #97.",Nate Cook,natecook@apple.com,2020-03-23 13:38:29-05:00,18000,Nate Cook,natecook@apple.com,2020-03-23 13:38:29-05:00,18000,True,False,3,5,2,1,main,Sources/ArgumentParser/Parsing/ArgumentSet.swift,14c7622293ffbb7a235e896e37adf7eb089884a3,0.0,0.0,1.0
8d31a0905c346a45c87773ad50862b5b3df8dff6,Update CHANGELOG for version 0.0.4,Nate Cook,natecook@apple.com,2020-03-23 13:47:23-05:00,18000,Nate Cook,natecook@apple.com,2020-03-23 13:47:23-05:00,18000,True,False,1,8,7,1,main,CHANGELOG.md,d875544e9638843e9256c824764cd94ee584b366,,,
4922eaa2db462df3eac54c38224b5e6d2b4676d1,"Add a link to the SwiftPM docs to the Getting Started guide

Fixes #93.",Nate Cook,natecook@apple.com,2020-03-23 15:12:40-05:00,18000,Nate Cook,natecook@apple.com,2020-03-23 15:12:40-05:00,18000,True,False,3,5,2,1,main,Documentation/01 Getting Started.md,8d31a0905c346a45c87773ad50862b5b3df8dff6,,,
0458ae288ed91af39718a93fbc2c6cbba8de4195,"Ensure that all parsable arguments have corresponding coding keys (#91)

* Ensure that all parsable arguments have corresponding coding keys

* Validate coding keys for ParsableArguments instead of ParsableCommand to handle OptionGroup validation

* Make coding key validation testable and add tests

* CodingKeyValidator API updates

* Improve the error message of coding key validator.

* Add `ParsableArguments` validation layer.",Yu Ao,YuAo@users.noreply.github.com,2020-03-28 02:48:07+08:00,-28800,GitHub,noreply@github.com,2020-03-27 13:48:07-05:00,18000,True,False,0,228,228,4,main,"Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsable Types/ParsableArgumentsValidation.swift, Tests/ArgumentParserUnitTests/CMakeLists.txt, Tests/ArgumentParserUnitTests/CodingKeyValidationTests.swift",4922eaa2db462df3eac54c38224b5e6d2b4676d1,1.0,1.0,1.0
023730bdda30adc0e40a37af94ef420c26585fdd,"Add `PositionalArgumentsValidator` (#101)

* Add `PositionalArgumentsValidator`

* Update tests for PositionalArgumentsValidator

* Use argument property names in PositionalArgumentsValidator.Error",Yu Ao,YuAo@users.noreply.github.com,2020-03-30 03:57:50+08:00,-28800,GitHub,noreply@github.com,2020-03-29 14:57:50-05:00,18000,True,False,77,176,99,4,main,"Sources/ArgumentParser/Parsable Types/ParsableArgumentsValidation.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserUnitTests/CMakeLists.txt, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift",0458ae288ed91af39718a93fbc2c6cbba8de4195,0.0,1.0,1.0
31799bc1b4015eec8a31d42a1f108b2955ec9a31,"Add built-in support for --version flag (#102)

* Add built-in support for --version flag

* Test that command-defined --version overrides the built-in.

* Document the `version:` parameter in CommandConfiguration

* Include --version in the generated help.",Nate Cook,natecook@apple.com,2020-03-30 12:36:21-05:00,18000,GitHub,noreply@github.com,2020-03-30 12:36:21-05:00,18000,True,False,12,159,147,13,main,"Examples/math/main.swift, Sources/ArgumentParser/Parsable Types/CommandConfiguration.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Usage/HelpCommand.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserEndToEndTests/SubcommandEndToEndTests.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserExampleTests/RepeatExampleTests.swift, Tests/ArgumentParserUnitTests/ExitCodeTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",023730bdda30adc0e40a37af94ef420c26585fdd,1.0,1.0,0.8461538461538461
0b8a81924dabcfc1854f3f7186d08afed985cc45,"Eliminate deprecated Process method calls.

Fixes #84.",Nate Cook,natecook@apple.com,2020-03-31 14:58:47-05:00,18000,Nate Cook,natecook@apple.com,2020-03-31 14:58:49-05:00,18000,True,False,3,14,11,1,main,Sources/ArgumentParserTestHelpers/TestHelpers.swift,31799bc1b4015eec8a31d42a1f108b2955ec9a31,,,
42c9d4a02c029b8a0cda54060d4f4bbd0303405e,"Call validate on the entire command stack, instead of just the final subcommand (#104)

Co-authored-by: Kenny York <kenny_york@apple.com>",Kenny York,kenny.york@jubileebest.org,2020-04-08 11:00:57-07:00,25200,GitHub,noreply@github.com,2020-04-08 13:00:57-05:00,18000,True,False,12,104,92,3,main,"Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Tests/ArgumentParserEndToEndTests/SubcommandEndToEndTests.swift",0b8a81924dabcfc1854f3f7186d08afed985cc45,0.1111111111111111,0.14814814814814814,1.0
ac24dc6cafcc9cff9ec628df654bbae4123a84e4,Fix test failures on Linux,Nate Cook,natecook@apple.com,2020-04-09 13:28:59-05:00,18000,Nate Cook,natecook@apple.com,2020-04-09 13:28:59-05:00,18000,True,False,5,10,5,2,main,"Package.swift, Tests/ArgumentParserEndToEndTests/SubcommandEndToEndTests.swift",42c9d4a02c029b8a0cda54060d4f4bbd0303405e,,,
047ac93a0247a3a0f47580bff9445e9a7acf8d58,Changed Readme notes about the ArgumentParser integration via SwiftPM. (#111),Max,maxscheglov@gmail.com,2020-04-11 05:03:46+02:00,-7200,GitHub,noreply@github.com,2020-04-10 22:03:46-05:00,18000,True,False,1,13,12,1,main,README.md,ac24dc6cafcc9cff9ec628df654bbae4123a84e4,,,
ff363dccdde5ec73dab0cb64b273f1ce1c7c2bc7,Fix some minor typos (#116),Nate Cook,natecook@apple.com,2020-04-15 14:30:37-05:00,18000,GitHub,noreply@github.com,2020-04-15 14:30:37-05:00,18000,True,False,5,2,-3,1,main,Documentation/04 Customizing Help.md,047ac93a0247a3a0f47580bff9445e9a7acf8d58,,,
9f04d1ff1afbccd02279338a2c91e5f27c45e93a,Update CHANGELOG for release 0.0.5 (#117),Nate Cook,natecook@apple.com,2020-04-15 14:48:23-05:00,18000,GitHub,noreply@github.com,2020-04-15 14:48:23-05:00,18000,True,False,1,22,21,1,main,CHANGELOG.md,ff363dccdde5ec73dab0cb64b273f1ce1c7c2bc7,,,
c114852474746f3a6573c1448e231854afb38807,"Unique argument names validator (#118)

* Add validator for argument name uniqueness.

Implements the feature requested in
https://github.com/apple/swift-argument-parser/issues/112.

* Update obsolete comment.

* Add trailing comma to list to ease future additions.

* Add test for uniqueness in `CaseIterable` `enum` short names.

Also reorganized unique names validator tests so example types are grouped with tests.

* Simplify by using `map`, as per PR feedback.

* Simply by eliminating more remnants of the more-complicated `Error`.",Todd Thomas,toddthomas@acm.org,2020-04-18 18:21:51-06:00,21600,GitHub,noreply@github.com,2020-04-18 19:21:51-05:00,18000,True,False,1,210,209,2,main,"Sources/ArgumentParser/Parsable Types/ParsableArgumentsValidation.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift",9f04d1ff1afbccd02279338a2c91e5f27c45e93a,0.5955056179775281,1.0,1.0
f9329cbc4caf1ed6e886beb0fa24ccb7b0f34f3e,"ArgumentParser: repair the build on Windows (#121)

Windows does not have a `EX_USAGE`, use `ERROR_BAD_ARGUMENTS` instead.",Saleem Abdulrasool,compnerd@compnerd.org,2020-04-21 07:27:40-07:00,25200,GitHub,noreply@github.com,2020-04-21 09:27:40-05:00,18000,True,False,0,8,8,1,main,Sources/ArgumentParser/Parsable Properties/Errors.swift,c114852474746f3a6573c1448e231854afb38807,1.0,1.0,1.0
0a5d9d09fff985f5e1d479936885588e34b12336,"Changing the access level of `ValidationError.message` (#119)

* `ValidationError.message` is now public readable

* Added a documentation line",Richard Stelling,richard@empiricalmagic.com,2020-04-21 15:31:45+01:00,-3600,GitHub,noreply@github.com,2020-04-21 09:31:45-05:00,18000,True,False,1,4,3,1,main,Sources/ArgumentParser/Parsable Properties/Errors.swift,f9329cbc4caf1ed6e886beb0fa24ccb7b0f34f3e,1.0,1.0,1.0
1081d08b1d716e6a68a9cbc258bb309359fbae1e,"Improve errors messages thrown from a `transform` closure (#115)

* Add a test for @Option transfrom

* Updated `testValidation_Fail()` transform test

It now checks for the validation error text thrown from a `transform` closure.

* Improved transform `@Option` tests

Added a test for the defaut error message and renamed object to imply the tests are for `@Options` only

* Added a `CustomParserErrorConvertible` protocol

Opting in an error types to this will prevent automatic error messages from being generated.

* Add associated value to `.unableToParseValue`

Added a `customMessage` (`String?`) associated value to `ParseError.unableToParseValue(…)`. Setting this will by-pass any automatic error generation.

* Convert transform throws into `unableToParseValue`

Errors thrown by the `transform` closure are caught and convered into a `ParserError.unableToParseValue(…)` error. If the thrown error also confirms to `CustomParserErrorConvertible` the `customMessage` associated value is of `.unableToParseValue` is set, otherwise it is nil.

Implemented for `@Option` and `@Argument`.

* Added transform tests

Added `ParsableArguments` and `ParsableCommand` tests for single values and arrays.

Testing for correctly parsing and transforming values. Throwing a custom error and improved default error messages.

* Add default value to `unableToParseValue`

`customMessage` now has a default value of `nil`

* Removed `CustomParserErrorConvertible`

Updated `unableToParseValue` to take an optional `Error` assocated value. If this error is not nil `unableToParseValueMessage(…)` makes best-efforts to create a custom error message.

* Updated tests to new error mssages format

* Reverted public access of ValidationError.message

* Improved coding standards

`catch` brases on the same line and 2 space indents.

* Simplified `unableToParseValueMessage(…)` logic

Append custom error message to all “unableToParse” errors if it is not nil

* Added a “Handling Transform Errors” section

* Improved switch/case statements

* Added docs link to Handling Transform Errors

* Update Documentation/05 Validation and Errors.md

Co-Authored-By: Xiaodi Wu <13952+xwu@users.noreply.github.com>

* Update Documentation/05 Validation and Errors.md

Co-Authored-By: Xiaodi Wu <13952+xwu@users.noreply.github.com>

* Update Documentation/05 Validation and Errors.md

Co-Authored-By: Xiaodi Wu <13952+xwu@users.noreply.github.com>

* Update Documentation/05 Validation and Errors.md

Co-Authored-By: Xiaodi Wu <13952+xwu@users.noreply.github.com>

* Fixed comment and docs typos

Co-Authored-By: Xiaodi Wu <13952+xwu@users.noreply.github.com>

* Fixed minor code formatting etc.

Co-Authored-By: Nate Cook <natecook@apple.com>

* Improved Documentation

Reduced the code used in the transform closure. Also fixed typing and formatting.

* Added error examples

* Doc edits via code review

Co-Authored-By: Nate Cook <natecook@apple.com>

* Converted TransformEndToEndTests.swift to

2-space indentation

Co-authored-by: Xiaodi Wu <13952+xwu@users.noreply.github.com>
Co-authored-by: Nate Cook <natecook@apple.com>",Richard Stelling,richard@empiricalmagic.com,2020-04-21 15:31:57+01:00,-3600,GitHub,noreply@github.com,2020-04-21 09:31:57-05:00,18000,True,False,24,266,242,7,main,"Documentation/02 Arguments, Options, and Flags.md, Documentation/05 Validation and Errors.md, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserEndToEndTests/TransformEndToEndTests.swift",0a5d9d09fff985f5e1d479936885588e34b12336,0.6101694915254238,0.6101694915254238,0.8305084745762712
c23dfb26daff914b2111d21389a6282adc2b9231,Fix documentation error in arguments/options/flags guide (#129),Nate Cook,natecook@apple.com,2020-05-03 14:08:44-05:00,18000,GitHub,noreply@github.com,2020-05-03 14:08:44-05:00,18000,True,False,2,2,0,1,main,"Documentation/02 Arguments, Options, and Flags.md",1081d08b1d716e6a68a9cbc258bb309359fbae1e,,,
3166c458f99e51892aab0675ec2d1efb373864ed,Update error message to mention initializers (#133),Nate Cook,natecook@apple.com,2020-05-04 23:32:45-05:00,18000,GitHub,noreply@github.com,2020-05-04 23:32:45-05:00,18000,True,False,3,7,4,1,main,Sources/ArgumentParser/Parsable Types/ParsableArguments.swift,c23dfb26daff914b2111d21389a6282adc2b9231,,,
e870503c45f53e70d820a6ed0f694065a506e626,"Add an EnumerableFlag protocol (#65)

* Add EnumerableFlag protocol

This addresses the need for providing name specifications for enum
flags, since property wrappers can't be used for enum cases.

* Incorporate updated flag-handling logic

* Include test of multiple names for enumerable flags

* Add documentation for EnumerableFlag protocol

* Add `static func help(for:)` to EnumerableFlag

* Update docs to cover `EnumerableFlag`

* Update default value documentation

* Revise the Flag type docs

* Update Documentation/02 Arguments, Options, and Flags.md

Co-authored-by: Kyle Macomber <kmacomber@apple.com>

Co-authored-by: Kyle Macomber <kmacomber@apple.com>",Nate Cook,natecook@apple.com,2020-05-10 17:08:44-05:00,18000,GitHub,noreply@github.com,2020-05-10 17:08:44-05:00,18000,True,False,32,294,262,9,main,"Documentation/02 Arguments, Options, and Flags.md, Sources/ArgumentParser/Parsable Properties/ArgumentHelp.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Types/EnumerableFlag.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/ArgumentParserEndToEndTests/FlagsEndToEndTests.swift",3166c458f99e51892aab0675ec2d1efb373864ed,0.5686274509803921,0.7647058823529411,0.9803921568627451
809b2f9a04227efe86cfc8483d1110060455f1c9,Add missing file to cmake build (#138),Owen Voorhees,owenvoorhees@gmail.com,2020-05-11 14:19:23-05:00,18000,GitHub,noreply@github.com,2020-05-11 14:19:23-05:00,18000,True,False,0,1,1,1,main,Sources/ArgumentParser/CMakeLists.txt,e870503c45f53e70d820a6ed0f694065a506e626,,,
7fc05c0da14d692073f0c477913e9dc97128b833,[build] CMake updates to support use in SwiftPM bootstrap (#139),Owen Voorhees,owenvoorhees@gmail.com,2020-05-12 10:56:46-05:00,18000,GitHub,noreply@github.com,2020-05-12 10:56:46-05:00,18000,True,False,2,24,22,4,main,"CMakeLists.txt, Sources/CMakeLists.txt, cmake/modules/ArgumentParserConfig.cmake.in, cmake/modules/CMakeLists.txt",809b2f9a04227efe86cfc8483d1110060455f1c9,,,
501bf60536048755cfcfae6d4d529049277c848b,"Display help when no arguments results in error (#140)

If a command cannot successfully run with zero arguments, print the error and the full help message instead of the short usage message.

This closes #134.",John Mueller,jmuellerokc@gmail.com,2020-05-14 09:08:19-05:00,18000,GitHub,noreply@github.com,2020-05-14 09:08:19-05:00,18000,True,False,2,41,39,6,main,"Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserEndToEndTests/ValidationEndToEndTests.swift, Tests/ArgumentParserExampleTests/RepeatExampleTests.swift",7fc05c0da14d692073f0c477913e9dc97128b833,0.0,0.44,1.0
afeb2009f815ac5c1102f3f28a5f9ea4f9df5abe,"Fix short names with equals sign (#141)

If an argument has a single dash and single character, followed by a value, treat it as a short name.
    `-c=1`      ->  `Name.short(""c"")`
Otherwise, treat it as a long name with single dash.
    `-count=1`  ->  `Name.longWithSingleDash(""count"")`",John Mueller,jmuellerokc@gmail.com,2020-05-14 10:09:30-05:00,18000,GitHub,noreply@github.com,2020-05-14 10:09:30-05:00,18000,True,False,1,87,86,2,main,"Sources/ArgumentParser/Parsing/SplitArguments.swift, Tests/ArgumentParserEndToEndTests/EqualsEndToEndTests.swift",501bf60536048755cfcfae6d4d529049277c848b,0.45161290322580644,1.0,1.0
44fb59ef87c067265db9461f3f003d067e18b9d0,"Add APIs for generating the help screen (#142)

* Add public API for generating help text

* Add tests for `helpMessage()`

* Update documentation

* Use new rendered method instead of property",Nate Cook,natecook@apple.com,2020-05-14 12:43:21-05:00,18000,GitHub,noreply@github.com,2020-05-14 12:43:21-05:00,18000,True,False,23,84,61,8,main,"Documentation/04 Customizing Help.md, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Usage/HelpCommand.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",afeb2009f815ac5c1102f3f28a5f9ea4f9df5abe,0.4166666666666667,1.0,1.0
223d62adc52d51669ae2ee19bdb8b7d9fd6fcd9c,Update changelog for release 0.0.6 (#145),Nate Cook,natecook@apple.com,2020-05-14 12:55:32-05:00,18000,GitHub,noreply@github.com,2020-05-14 12:55:32-05:00,18000,True,False,1,52,51,1,main,CHANGELOG.md,44fb59ef87c067265db9461f3f003d067e18b9d0,,,
5f49a17c6aeff6da9f38ae02bb898d3ac09e25ee,"Add a tool for getting the authors within a range of commits from GitHub (#146)

* Add a tool for getting the authors within a range of commits from GitHub

* Switch to 5.1 syntax",Nate Cook,natecook@apple.com,2020-05-15 15:01:12-05:00,18000,GitHub,noreply@github.com,2020-05-15 15:01:12-05:00,18000,True,False,0,148,148,2,main,"Package.swift, Tools/changelog-authors/main.swift",223d62adc52d51669ae2ee19bdb8b7d9fd6fcd9c,1.0,1.0,1.0
a3ef4d29e116555b41827a368dc164ba572f6b38,Set isOptional flag for options of Optional type (#147),Aleksey Mashanov,aleksey.mashanov@gmail.com,2020-05-15 23:16:05+03:00,-10800,GitHub,noreply@github.com,2020-05-15 15:16:05-05:00,18000,True,False,0,12,12,2,main,"Sources/ArgumentParser/Parsable Properties/Option.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",5f49a17c6aeff6da9f38ae02bb898d3ac09e25ee,1.0,1.0,1.0
df24620865738100fda0906748f29b584aa61fce,Fix invalid indention of strings with short lines (#148),Aleksey Mashanov,aleksey.mashanov@gmail.com,2020-05-16 20:39:56+03:00,-10800,GitHub,noreply@github.com,2020-05-16 12:39:56-05:00,18000,True,False,10,40,30,2,main,"Sources/ArgumentParser/Utilities/StringExtensions.swift, Tests/ArgumentParserUnitTests/StringWrappingTests.swift",a3ef4d29e116555b41827a368dc164ba572f6b38,1.0,1.0,1.0
f18ce1a545460fc482bed3d402676455f87fb455,"build: add support for installation (#150)

This extends the CMake build to install the artifacts.  This is required
for redistribution of the build.",Saleem Abdulrasool,compnerd@compnerd.org,2020-05-16 10:41:05-07:00,25200,GitHub,noreply@github.com,2020-05-16 12:41:05-05:00,18000,True,False,6,99,93,4,main,"CMakeLists.txt, Sources/ArgumentParser/CMakeLists.txt, Sources/CMakeLists.txt, cmake/modules/SwiftSupport.cmake",df24620865738100fda0906748f29b584aa61fce,,,
4143a356f1b9811704e38a49355da5cc9c53c3db,"Remove extraneous newline for empty abstract (#161)

In the event a configuration has an empty abstract and non-empty discussion,
an extra line was generated. This patch removes that line.

ISSUE: SAP-156 https://github.com/apple/swift-argument-parser/issues/156",Erica Sadun,erica@ericasadun.com,2020-05-21 00:18:43-06:00,21600,GitHub,noreply@github.com,2020-05-21 01:18:43-05:00,18000,True,False,1,23,22,2,main,"Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",f18ce1a545460fc482bed3d402676455f87fb455,0.8125,0.0,1.0
85196ee1d824d16b3f7f9870404b4b286e7c050e,"Additional help messages (#165)

* Add 'see help' messages to usage messages and the help screen

* Update tests for new help messages.

* Update guide examples with additional help messages",Nate Cook,natecook@apple.com,2020-05-22 17:04:14-05:00,18000,GitHub,noreply@github.com,2020-05-22 17:04:14-05:00,18000,True,False,2,55,53,14,main,"Documentation/02 Arguments, Options, and Flags.md, Documentation/03 Commands and Subcommands.md, Documentation/05 Validation and Errors.md, README.md, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Tests/ArgumentParserEndToEndTests/SubcommandEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/TransformEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/ValidationEndToEndTests.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserExampleTests/RepeatExampleTests.swift, Tests/ArgumentParserExampleTests/RollDiceExampleTests.swift, Tests/ArgumentParserPackageManagerTests/HelpTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",4143a356f1b9811704e38a49355da5cc9c53c3db,0.037037037037037035,0.8888888888888888,1.0
ca89041e56f734f89fdf3b3d0208b674a7b899ea,"Fix showing help message when “-h” is given as an input for an array type argument (#149) (#166)

When argument is an array and no input is given but “-h”, if you throw an Error in Validate function, it prints error and short usage instead of help message.
This patch checks built-in flags before throwing a validation error.

Solves #149

Co-authored-by: ibrahim oktay <ibrahim.oktay@aktifbank.com.tr>",ibrahim oktay,36792481+ibrahimoktay@users.noreply.github.com,2020-05-28 01:05:47+03:00,-10800,GitHub,noreply@github.com,2020-05-27 17:05:47-05:00,18000,True,False,0,24,24,2,main,"Sources/ArgumentParser/Parsing/CommandParser.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",85196ee1d824d16b3f7f9870404b4b286e7c050e,0.9444444444444444,0.9444444444444444,1.0
8883f06b4e41cf1b6a0bea5444df3748798e44bf,"Don't consume the terminator during parsing. (#168)

Fixes #130.",Nate Cook,natecook@apple.com,2020-05-28 01:13:15-05:00,18000,GitHub,noreply@github.com,2020-05-28 01:13:15-05:00,18000,True,False,7,43,36,5,main,"Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Tests/ArgumentParserEndToEndTests/OptionGroupEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/RepeatingEndToEndTests.swift",ca89041e56f734f89fdf3b3d0208b674a7b899ea,0.020833333333333332,0.020833333333333332,1.0
4c071258909ec9b72fe9a2173598d9c6415de0cf,"Remove `Never` return from ParsableCommand.main() (#162)

This provides support for using the `@main` attribute on the root
command type.",Nate Cook,natecook@apple.com,2020-06-01 16:13:43-05:00,18000,GitHub,noreply@github.com,2020-06-01 16:13:43-05:00,18000,True,False,4,10,6,1,main,Sources/ArgumentParser/Parsable Types/ParsableCommand.swift,8883f06b4e41cf1b6a0bea5444df3748798e44bf,1.0,1.0,1.0
6c6b77c71329b5942da25ffd0f3986db55e5164a,"Test source compatibility for property wrappers (#172)

* Eliminate #file warnings

* Test source compatibility for property wrappers

This adds compilation tests for all the property wrappers, including
all the various permutations of their default parameter values.",Nate Cook,natecook@apple.com,2020-06-01 16:14:15-05:00,18000,GitHub,noreply@github.com,2020-06-01 16:14:15-05:00,18000,True,False,56,264,208,6,main,"Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserEndToEndTests/FlagsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/SourceCompatEndToEndTests.swift, Tests/ArgumentParserUnitTests/NameSpecificationTests.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift, Tests/ArgumentParserUnitTests/SplitArgumentTests.swift",4c071258909ec9b72fe9a2173598d9c6415de0cf,1.0,1.0,1.0
c87d0d0dde8db485c796752491dab4c6102a3e0f,"Remove `ExpressibleByArgument` conformance from `Optional` (#173)

* Remove ExpressibleByArgument conformance for Optional

It turns out that the conditional conformance for Optional was a bad idea, and
it should be handled more like Array, with specific initializers for the Optional
case. Primarily, this is because providing a default value for an optional property
doesn't make sense -- the default is already nil, and a non-nil default means that
the property will never be nil and therefore shouldn't be optional.

* Drop duplicated argument definitions

d1 and d6 are duplicates of c2 and c, respectively.

* Correctly mark optional args/options as optional

* Correct documentation for Option/Argument

* Use the correct parameter name in the documentation",Nate Cook,natecook@apple.com,2020-06-01 21:47:22-05:00,18000,GitHub,noreply@github.com,2020-06-01 21:47:22-05:00,18000,True,False,30,99,69,6,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserEndToEndTests/SourceCompatEndToEndTests.swift",6c6b77c71329b5942da25ffd0f3986db55e5164a,,,
aad1ac085b722b6cddf18cd5eec7c20d2a0cad4a,"Make ParsableCommand.run() a mutating method (#163)

Co-authored-by: Erik Little <nuclear.ace@gmail.com>",Nate Cook,natecook@apple.com,2020-06-02 14:07:16-05:00,18000,GitHub,noreply@github.com,2020-06-02 14:07:16-05:00,18000,True,False,44,44,0,18,main,"Documentation/01 Getting Started.md, Documentation/02 Arguments, Options, and Flags.md, Documentation/03 Commands and Subcommands.md, Documentation/04 Customizing Help.md, Documentation/05 Validation and Errors.md, Documentation/06 Manual Parsing and Testing.md, Examples/math/main.swift, Examples/repeat/main.swift, README.md, Sources/ArgumentParser/Parsable Types/EnumerableFlag.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Usage/HelpCommand.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserEndToEndTests/RepeatingEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/SubcommandEndToEndTests.swift, Tests/ArgumentParserPackageManagerTests/PackageManager/GenerateXcodeProject.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift, Tools/changelog-authors/main.swift",c87d0d0dde8db485c796752491dab4c6102a3e0f,,,
6741c5ab92960be36105c3dcc44733f4b9620120,Adding missing ParsableArgumentsValidation.swift to CMakeLists. (#175),Brad Larson,bradlarson@google.com,2020-06-02 19:10:06-05:00,18000,GitHub,noreply@github.com,2020-06-02 19:10:06-05:00,18000,True,False,0,1,1,1,main,Sources/ArgumentParser/CMakeLists.txt,aad1ac085b722b6cddf18cd5eec7c20d2a0cad4a,,,
2c708bd25247a83fb4c6e3b10a51169c3bd6c50b,Fixing math example on Linux. (#174),Brad Larson,bradlarson@google.com,2020-06-02 19:13:37-05:00,18000,GitHub,noreply@github.com,2020-06-02 19:13:37-05:00,18000,True,False,1,2,1,1,main,Examples/CMakeLists.txt,6741c5ab92960be36105c3dcc44733f4b9620120,,,
b69c4b41929f44e9df815c9560e9f3d3f03a69ed,Update changelog (#176),Nate Cook,natecook@apple.com,2020-06-03 08:45:14-05:00,18000,GitHub,noreply@github.com,2020-06-03 08:45:14-05:00,18000,True,False,1,41,40,1,main,CHANGELOG.md,2c708bd25247a83fb4c6e3b10a51169c3bd6c50b,,,
ef76d22b8b2c413b23fcc5d65e7f2921c6e6a4be,Convert deprecations from pre-0.1.0 to unavailable (#177),Nate Cook,natecook@apple.com,2020-06-03 11:18:42-05:00,18000,GitHub,noreply@github.com,2020-06-03 11:18:42-05:00,18000,True,False,58,68,10,6,main,"Sources/ArgumentParser/Parsable Properties/Flag.swift, Tests/ArgumentParserEndToEndTests/FlagsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/SourceCompatEndToEndTests.swift, Tests/ArgumentParserUnitTests/ErrorMessageTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift",b69c4b41929f44e9df815c9560e9f3d3f03a69ed,1.0,1.0,1.0
3d79b2b5a2e5af52c14e462044702ea7728f5770,Update changelog for 0.1.0 release (#178),Nate Cook,natecook@apple.com,2020-06-03 13:56:44-05:00,18000,GitHub,noreply@github.com,2020-06-03 13:56:44-05:00,18000,True,False,6,28,22,3,main,"CHANGELOG.md, Documentation/01 Getting Started.md, README.md",ef76d22b8b2c413b23fcc5d65e7f2921c6e6a4be,,,
d9fc13572da823cdf030bc3861797131c80f0b91,"Update README with correct error message (#181)

Fixes #180.",Nate Cook,natecook@apple.com,2020-06-06 18:49:51-05:00,18000,GitHub,noreply@github.com,2020-06-06 18:49:51-05:00,18000,True,False,2,2,0,1,main,README.md,3d79b2b5a2e5af52c14e462044702ea7728f5770,,,
59f39ec12754313507eeb3a78ca2132795bb4500,"Use the first long name in usage (#179)

* Use the first long name in usage (#167)

Sorting names for option has been changed.
* Usage will choose the first long name, if available, or otherwise the first short name
* Help screen will show short names, then long names, in the order of their declaration.

Solves (#167)

* Fix adding same name more than once.

Checkin long names in sort caused single dash long names to be treated as a short name.
Fixed sort to check “short” instead of “long”

Update current test to cover more cases.

* Add isShort control to Name

*Replace sortedNames with partitionedNames

*Extract uniquifying logic into SequenceExtensions.swift

* Refactor short test with computed property

* Use pattern-matching instead of equality comparison",ibrahim oktay,ibrahimoktay@yahoo.com,2020-06-10 01:14:06+03:00,-10800,GitHub,noreply@github.com,2020-06-09 17:14:06-05:00,18000,True,False,24,80,56,6,main,"Sources/ArgumentParser/Parsable Properties/NameSpecification.swift, Sources/ArgumentParser/Parsing/Name.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Sources/ArgumentParser/Utilities/SequenceExtensions.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",d9fc13572da823cdf030bc3861797131c80f0b91,1.0,1.0,1.0
02a95bdaea0624c4437a2f067444a4d030f12595,"Help message for default subcommands (#183)

* Update label for default subcommand

* Add test for default subcommand

* Fix test fixtures with default subcommand help message",Artem Novichkov,novichkoff93@gmail.com,2020-06-11 22:09:26+06:00,-21600,GitHub,noreply@github.com,2020-06-11 11:09:26-05:00,18000,True,False,3,28,25,3,main,"Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",59f39ec12754313507eeb3a78ca2132795bb4500,1.0,1.0,1.0
f9446dc5b743c0deeff8b6f30ee63ebdfb566204,"Update CMakeLists.txt (#185)

Add missing reference to `Utilities/SequenceExtensions.swift` which was failed to be updated with #179",Saleem Abdulrasool,compnerd@compnerd.org,2020-06-11 21:29:03-07:00,25200,GitHub,noreply@github.com,2020-06-11 23:29:03-05:00,18000,True,False,0,1,1,1,main,Sources/ArgumentParser/CMakeLists.txt,02a95bdaea0624c4437a2f067444a4d030f12595,,,
1fa25574f8b774a4689399c1da9db38e4f2ed16e,"Show option-based errors before unexpected positional errors (#187)

This pushes any errors indicated by unexpected arguments after parsing
out to the same late position. We were previously stopping immediately
when the command is a leaf node; that isn't necessary and created an
awkward second error path.",Nate Cook,natecook@apple.com,2020-06-15 14:32:36-05:00,18000,GitHub,noreply@github.com,2020-06-15 14:32:36-05:00,18000,True,False,45,24,-21,4,main,"Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/ParsedValues.swift, Tests/ArgumentParserUnitTests/ErrorMessageTests.swift",f9446dc5b743c0deeff8b6f30ee63ebdfb566204,1.0,0.8181818181818182,0.0
618f282c57b66b8351550f591209de4896f539df,Backport CMake support to 3.15.1 (#189),Owen Voorhees,owenvoorhees@gmail.com,2020-06-16 11:44:39-07:00,25200,GitHub,noreply@github.com,2020-06-16 13:44:39-05:00,18000,True,False,3,9,6,1,main,CMakeLists.txt,1fa25574f8b774a4689399c1da9db38e4f2ed16e,,,
f07d2fb10700872d35815b165e855d7899cab456,"Enable default for option and argument arrays (#186)

* Enable default for option and argument arrays

* Moved array reset to ParsedValues",John Mueller,jmuellerokc@gmail.com,2020-06-22 13:53:31-05:00,18000,GitHub,noreply@github.com,2020-06-22 13:53:31-05:00,18000,True,False,40,183,143,7,main,"Documentation/02 Arguments, Options, and Flags.md, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsing/ParsedValues.swift, Tests/ArgumentParserEndToEndTests/DefaultsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/SourceCompatEndToEndTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",618f282c57b66b8351550f591209de4896f539df,0.0,1.0,1.0
c0f9a5feeeaaf8eeaadd1f2cea30b9d7088ab6c3,"Allow normal Swift default property initialization syntax (#170)

* Allow normal Swift default property initialization syntax

This change allows the normal `var foo = ""blah""` default initialization 
syntax for `Option`s, as a parallel initialization method as using the 
`default` parameter.

* Add simple tests for default property initialization

* Centralize some constructor logic into a private `init`

Preparing for another no-initial value `init` to be added and the existing one with a `default` parameter to be deprecated

* Deprecate previous `Option.init` with `default` parameter

It's replaced with an `init` containing no default value parameter, which will be used when the user does not provide any value.

Also add a (most likely unnecessary) sanity test to make sure initializations without a default value still work.
Also copy out documentation to allow clean removal of the older `init` when the time comes.

* Document added test cases

* Correct punctuation

* Extend standard default initialization syntax to `Option`s with `transform` parameters

* Actually replace previous `init` with private version

This mirrors the non-transform variants, and should have been included in the previous commits

* Clean up usage of default parameter values

Private `init` doesn't need defaults, and the deprecated public ones shouldn't have it to avoid confusion with the new methods

* Clean up documentation

Treat new initializers as the originally intended way to allow for clean removal of the deprecated methods
Also add some additional documentation to the deprecated methods to help point users in the right direction

* Extend standard default initialization to `Argument`s

* Extend standard default initialization to `Flag`s

* Default flags with inversions to nil/required

* Extend standard default initialization to no-inversion boolean `Flags`

Prints a warning when that default value is `true` instead of `false`, as the flag value will be pinned regardless of user input

* Eliminate deprecation spam from default value initialization

All examples and unit tests have been transitioned to the new syntax, with the exception of `SourceCompatEndToEndTests`, which should not have the old style removed until it is no longer valid source.

* Add source compatibility tests for new default syntax and associated changes

* Update top-level documentation",Mike Lewis,mike@mplew.is,2020-06-22 21:12:51-07:00,25200,GitHub,noreply@github.com,2020-06-22 23:12:51-05:00,18000,True,False,672,1463,791,32,main,"Documentation/02 Arguments, Options, and Flags.md, Documentation/03 Commands and Subcommands.md, Documentation/04 Customizing Help.md, Documentation/05 Validation and Errors.md, Documentation/06 Manual Parsing and Testing.md, Examples/math/main.swift, Examples/repeat/main.swift, Examples/roll/main.swift, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserEndToEndTests/CustomParsingEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/DefaultSubcommandEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/DefaultsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/EqualsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/FlagsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/LongNameWithShortDashEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/NestedCommandEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/OptionGroupEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/RepeatingEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/ShortNameEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/SourceCompatEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/SubcommandEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/ValidationEndToEndTests.swift, Tests/ArgumentParserPackageManagerTests/HelpTests.swift, Tests/ArgumentParserPackageManagerTests/PackageManager/GenerateXcodeProject.swift, Tests/ArgumentParserPackageManagerTests/PackageManager/Options.swift, Tests/ArgumentParserUnitTests/ErrorMessageTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",f07d2fb10700872d35815b165e855d7899cab456,1.0,1.0,1.0
35ceb59427d0cc836bb57dee0a3d4ea7ae9b6c05,"Nate/continue default initialization (#193)

* Use type inference for flags / options

* Use default value syntax for arg/option arrays

* Allow a default for flag arrays

* Fix some whitespace

* Allow arguments validations to warn instead of fail

* Move nonsense flag warning to argument validation

* Update guides/readme with default literal syntax",Nate Cook,natecook@apple.com,2020-06-23 10:43:50-05:00,18000,GitHub,noreply@github.com,2020-06-23 10:43:50-05:00,18000,True,False,265,462,197,29,main,"Documentation/01 Getting Started.md, Documentation/02 Arguments, Options, and Flags.md, Documentation/03 Commands and Subcommands.md, Documentation/04 Customizing Help.md, Documentation/05 Validation and Errors.md, Documentation/06 Manual Parsing and Testing.md, Examples/math/main.swift, Examples/repeat/main.swift, Examples/roll/main.swift, README.md, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Types/ParsableArgumentsValidation.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Usage/HelpCommand.swift, Tests/ArgumentParserEndToEndTests/CustomParsingEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/DefaultsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/FlagsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/PositionalEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/RepeatingEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/SourceCompatEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/SubcommandEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/TransformEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/ValidationEndToEndTests.swift, Tests/ArgumentParserPackageManagerTests/PackageManager/Options.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",c0f9a5feeeaaf8eeaadd1f2cea30b9d7088ab6c3,0.4032258064516129,1.0,1.0
8de98bd8b9e84c9cdcebdcccaa1f3fdcbee525bd,Bump Swift version to 5.2 (#195),Nate Cook,natecook@apple.com,2020-06-23 11:00:17-05:00,18000,GitHub,noreply@github.com,2020-06-23 11:00:17-05:00,18000,True,False,1,1,0,1,main,Package.swift,35ceb59427d0cc836bb57dee0a3d4ea7ae9b6c05,,,
eb51f949cdd0c9d88abba9ce79d37eb7ea1231d0,Update changelog for 0.2.0 release (#194),Nate Cook,natecook@apple.com,2020-06-23 11:02:53-05:00,18000,GitHub,noreply@github.com,2020-06-23 11:02:53-05:00,18000,True,False,6,53,47,3,main,"CHANGELOG.md, Documentation/01 Getting Started.md, README.md",8de98bd8b9e84c9cdcebdcccaa1f3fdcbee525bd,,,
20920752498e8dd9ad5de1a37531d91fa5e24a48,"Add a precondition to prevent the parsing of a command that has itself as its subcommand (#197)

* Add a precondition to prevent the parsing of a command that has itself as its subcommand.

This avoids the infinite recursion that causes a crash and shows the user a meaningful error message.

Fixes: https://github.com/apple/swift-argument-parser/issues/192

* Fix the detection of a command that has itself as its subcommand

- The recursion detection now works for both the root command and its subcommands
- Add a test to shows that the fix works

* Fix typo in TreeTests",Niccolò Fontana,inico1@me.com,2020-06-29 21:53:49+02:00,-7200,GitHub,noreply@github.com,2020-06-29 14:53:49-05:00,18000,True,False,3,33,30,3,main,"Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Utilities/Tree.swift, Tests/ArgumentParserUnitTests/TreeTests.swift",eb51f949cdd0c9d88abba9ce79d37eb7ea1231d0,1.0,1.0,1.0
e77b025008731be24d7f46e575def4027ab3a07e,"Optimize Sequence.uniquified() (#201)

* Improve performance of Sequence.uniquified()

* Use Element not Iterator.Element

* Use Set.insert instead of Dictionary.updateValue

* Update Sources/ArgumentParser/Utilities/SequenceExtensions.swift

got it - sorry about that!

Co-authored-by: Nate Cook <natecook@apple.com>

Co-authored-by: Nate Cook <natecook@apple.com>",Kenny,11343005+schlagelk@users.noreply.github.com,2020-06-29 21:25:46-06:00,21600,GitHub,noreply@github.com,2020-06-29 22:25:46-05:00,18000,True,False,8,3,-5,1,main,Sources/ArgumentParser/Utilities/SequenceExtensions.swift,20920752498e8dd9ad5de1a37531d91fa5e24a48,0.0,0.0,0.0
78e6cf943630ef8bea7961c376cffc73eb31e09f,"Allow property wrappers to be used without parentheses (#207)

Fixes #206[1], where unless the property wrapper types were used with empty
parentheses, `ParsableArguments`-conforming types would not have a
no-argument initializer synthesized and thus would unexpectedbly fail to
conform to `ParsableArguments`.[1]

This is caused by a limitation of the compiler's property wrapper
support where it fails to see initializers in extensions as candidates
for property wrapper requirements.[2]

By declaring a no-argument intializer in each type, but then marking it
as unavailable, the no-parenthesis syntax now works, but selects the
existing initializers in extensions anyway.

[1]: https://github.com/apple/swift-argument-parser/issues/206
[2]: https://bugs.swift.org/browse/SR-13295",Adam Sharp,sharplet@users.noreply.github.com,2020-07-27 18:24:08-04:00,14400,GitHub,noreply@github.com,2020-07-27 17:24:08-05:00,18000,True,False,37,78,41,5,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift",e77b025008731be24d7f46e575def4027ab3a07e,1.0,1.0,1.0
a4e4ae4e128a999fcf66f8364521398447a3a90b,"Update documentation and examples to use natural property wrapper syntax (#210)

Since https://github.com/apple/swift-argument-parser/pull/207, property
wrapper usage with no arguments can now use the more natural syntax
without the `()`. Updates documentation and example code accordingly.",Adam Sharp,sharplet@users.noreply.github.com,2020-07-28 12:34:12-04:00,14400,GitHub,noreply@github.com,2020-07-28 11:34:12-05:00,18000,True,False,84,49,-35,12,main,"CHANGELOG.md, Documentation/01 Getting Started.md, Documentation/02 Arguments, Options, and Flags.md, Documentation/03 Commands and Subcommands.md, Documentation/05 Validation and Errors.md, Documentation/06 Manual Parsing and Testing.md, Examples/math/main.swift, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Types/EnumerableFlag.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/HelpCommand.swift",78e6cf943630ef8bea7961c376cffc73eb31e09f,,,
b1f34b166b7b304d26ee1804320a2080660a8620,"Make arrays with default values use their elements' defaultValueDescription (#209)

* Make array arguments/options use their elements' defaultArgumentValue

* Add test

* Don't wrap the output in square brackets

* Change testHelpWithDefaultValues() to expect bracketless array description",Nate Weaver,wevah@derailer.org,2020-07-28 11:39:24-05:00,18000,GitHub,noreply@github.com,2020-07-28 11:39:24-05:00,18000,True,False,3,43,40,4,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",a4e4ae4e128a999fcf66f8364521398447a3a90b,1.0,1.0,1.0
cdce71fed11666072f93f9e49ebbc11f0354b283,"Omit ""return"" keyword (#211)",Nate Weaver,wevah@derailer.org,2020-07-29 17:25:23-05:00,18000,GitHub,noreply@github.com,2020-07-29 17:25:23-05:00,18000,True,False,1,1,0,1,main,Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift,b1f34b166b7b304d26ee1804320a2080660a8620,,,
280700d361c1b3af6e2345f5e24f67fa9450bec6,"Add completion script generation (#123)

Support for generating shell completion scripts for `ParsableCommand`
types, with customization points for `ExpressibleByArgument` types and
individual arguments and options. Zsh and Bash are supported in this
initial release.",Nate Cook,natecook@apple.com,2020-07-29 17:58:44-05:00,18000,GitHub,noreply@github.com,2020-07-29 17:58:44-05:00,18000,True,False,158,1807,1649,30,main,"Documentation/07 Completion Scripts.md, Examples/math/main.swift, Sources/ArgumentParser/CMakeLists.txt, Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/CompletionsGenerator.swift, Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/CompletionKind.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/NameSpecification.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Types/CommandConfiguration.swift, Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/Parsed.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Sources/ArgumentParser/Usage/HelpCommand.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Sources/ArgumentParser/Utilities/SequenceExtensions.swift, Sources/ArgumentParser/Utilities/StringExtensions.swift, Tests/ArgumentParserEndToEndTests/EnumEndToEndTests.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift, Tests/ArgumentParserUnitTests/SequenceExtensionTests.swift",cdce71fed11666072f93f9e49ebbc11f0354b283,0.4715909090909091,0.865530303030303,0.8825757575757576
43b1cbe4e00335e73af69e66620c5a70ea2a427c,Add comment about a compilation-only test (#212),Nate Cook,natecook@apple.com,2020-07-30 10:49:57-05:00,18000,GitHub,noreply@github.com,2020-07-30 10:49:57-05:00,18000,True,False,0,1,1,1,main,Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift,280700d361c1b3af6e2345f5e24f67fa9450bec6,,,
7255fd547f70468e19abbac5f7964f1ef309ad92,Update changelog for 0.2.1 release (#213),Nate Cook,natecook@apple.com,2020-07-30 11:15:37-05:00,18000,GitHub,noreply@github.com,2020-07-30 11:15:37-05:00,18000,True,False,1,32,31,1,main,CHANGELOG.md,43b1cbe4e00335e73af69e66620c5a70ea2a427c,,,
be80c40cecb77be804933754adcd6a8bdf1aa969,add details about zsh completion script format (#217),Miguel Ángel Díaz,madiaz.dev@gmail.com,2020-07-31 21:23:22+00:00,0,GitHub,noreply@github.com,2020-07-31 16:23:22-05:00,18000,True,False,0,6,6,1,main,Documentation/07 Completion Scripts.md,7255fd547f70468e19abbac5f7964f1ef309ad92,,,
163211e2e48d958cdb6a55b50012e04dd1b8f583,"fix: Improve zsh completion script generator (#219)

* `shellCommand` stores output in a local array that is passed
  to `_describe` to handle spaces and other punctuation in
  the shell command output

* elide the help abstract if it is empty, as it confuses
  the zsh completion system

* set the `_<commandName>_commandname` to `$words[1]`, which
  is the full name of the command used to invoke the completion.
  This ensures invocations like `./build/debug/math` ...
  as passed on to the `_custom_completion` command.",Stuart Carnie,stuart.carnie@gmail.com,2020-08-03 12:26:25-07:00,25200,GitHub,noreply@github.com,2020-08-03 14:26:25-05:00,18000,True,False,21,25,4,3,main,"Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",be80c40cecb77be804933754adcd6a8bdf1aa969,0.0,1.0,1.0
5323d56ea914085bee3fea5546b9e1ad8e0af858,"Escape backslash and square brackets in addition to single quotes (#222)

* Escape backslash and square brackets as well as single quotes (#218 and #221)

- Escape appropriate chars in subcommand abstracts as well.

* Add test for escaped zsh characters",Nate Weaver,wevah@derailer.org,2020-08-04 22:51:32-05:00,18000,GitHub,noreply@github.com,2020-08-04 22:51:32-05:00,18000,True,False,5,61,56,2,main,"Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",163211e2e48d958cdb6a55b50012e04dd1b8f583,0.5882352941176471,1.0,1.0
c3c1a5fc77324e99e5e1bf3d8ac834165f9f6f80,"Add an experimental customization point for the error label (#223)

SwiftPM uses ""error:"" instead of ""Error:"" to make its error
messages match the compiler.",Nate Cook,natecook@apple.com,2020-08-05 08:46:11-05:00,18000,GitHub,noreply@github.com,2020-08-05 08:46:11-05:00,18000,True,False,9,15,6,3,main,"Sources/ArgumentParser/Parsable Types/CommandConfiguration.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/MessageInfo.swift",5323d56ea914085bee3fea5546b9e1ad8e0af858,0.9166666666666666,0.08333333333333333,1.0
115cacd4a1277e1145395da10187a37888a087ca,"Improve support for multi-word completion strings in ZSH (#216)

* Improve support for multi-word completions in Z shell

I will not pretend to fully understand why this new ""expand string into array"" expression works when the other didn't, but it does. The new expression is based on this SO answer: https://unix.stackexchange.com/a/29748.

The motivation for this change was for the install command of xcodes (https://github.com/RobotsAndPencils/xcodes) to support Xcode version completion strings with multiple words, like ""11.6 Beta"". The previous version of this expression would split this string into two, so that ""11.6"" and ""Beta"" were independent options in the ZSH completion UI, which didn't make sense for this use case.",Brandon Evans,brandon@brandonevans.ca,2020-08-05 10:49:05-06:00,21600,GitHub,noreply@github.com,2020-08-05 11:49:05-05:00,18000,True,False,4,4,0,3,main,"Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",c3c1a5fc77324e99e5e1bf3d8ac834165f9f6f80,,,
3e7d2fe99da091dcc1e4a7dd22fc3cfc2dca7937,Update changelog for 0.2.2 release (#224),Nate Cook,natecook@apple.com,2020-08-05 12:46:50-05:00,18000,GitHub,noreply@github.com,2020-08-05 12:46:50-05:00,18000,True,False,2,17,15,1,main,CHANGELOG.md,115cacd4a1277e1145395da10187a37888a087ca,,,
6180c8ba819d595461ea7ae92667fb5689ede482,fix minor typo (#225),Thomas Van Lenten,thomasvl@google.com,2020-08-06 11:58:15-04:00,14400,GitHub,noreply@github.com,2020-08-06 10:58:15-05:00,18000,True,False,1,1,0,1,main,CHANGELOG.md,3e7d2fe99da091dcc1e4a7dd22fc3cfc2dca7937,,,
b905f5c777458af6fc5649b0dfb5f3d8092ad5e3,Improve the completion tests a bit (#228),Nate Cook,natecook@apple.com,2020-08-12 14:17:58-05:00,18000,GitHub,noreply@github.com,2020-08-12 14:17:58-05:00,18000,True,False,10,26,16,2,main,"Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",6180c8ba819d595461ea7ae92667fb5689ede482,0.0,1.0,1.0
2104b1a314c7d7f83310f9b35a054294dc7f8dd3,Add Fish completion generator (#226),Daniel Duan,daniel@duan.ca,2020-08-13 10:11:08-07:00,25200,GitHub,noreply@github.com,2020-08-13 12:11:08-05:00,18000,True,False,4,247,243,6,main,"Documentation/07 Completion Scripts.md, Sources/ArgumentParser/CMakeLists.txt, Sources/ArgumentParser/Completions/CompletionsGenerator.swift, Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",b905f5c777458af6fc5649b0dfb5f3d8092ad5e3,0.034482758620689655,0.6206896551724138,1.0
8dfa17710296c31d8760c9f2fd86f0aab263a5dd,"Allow required array arguments, options, and flags (#196)

* Allow required arrays in `Option`s

Un-deprecates (but changes the semantics of) an initializer for an array value type without a default, forcing the user to specify at least one value from the command line.

* Allow required arrays in `Argument`s

Extends the parent commit to arguments, still un-deprecating and changing the semantics of the previous initializer to force users to provide a value on the command line.

* Allow required arrays in `Flag`s

Extends the previous commits to flags, still un-deprecating and changing the semantics of the previous initializer to force users to provide a value on the command line.

* Add default-value section to documentation",Mike Lewis,mike@mplew.is,2020-08-14 13:00:07-07:00,25200,GitHub,noreply@github.com,2020-08-14 15:00:07-05:00,18000,True,False,87,476,389,5,main,"Documentation/02 Arguments, Options, and Flags.md, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Tests/ArgumentParserEndToEndTests/DefaultsEndToEndTests.swift",2104b1a314c7d7f83310f9b35a054294dc7f8dd3,1.0,1.0,1.0
15351c1cd009eba0b6e438bfef55ea9847a8dc4a,Update changelog for 0.3.0 release (#229),Nate Cook,natecook@apple.com,2020-08-15 13:14:52-05:00,18000,GitHub,noreply@github.com,2020-08-15 13:14:52-05:00,18000,True,False,6,34,28,3,main,"CHANGELOG.md, Documentation/01 Getting Started.md, README.md",8dfa17710296c31d8760c9f2fd86f0aab263a5dd,,,
06c44f562984a1216154e3bb86780d770ec9cc00,"Allows single- and double-dashed args with the same name (#232)

Fixes #231.",Nate Cook,natecook@apple.com,2020-08-28 16:37:23-05:00,18000,GitHub,noreply@github.com,2020-08-28 16:37:23-05:00,18000,True,False,10,10,0,2,main,"Sources/ArgumentParser/Parsable Types/ParsableArgumentsValidation.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift",15351c1cd009eba0b6e438bfef55ea9847a8dc4a,,,
365ca6a987427aa05785e0913dbba87ffea0da89,Remove an unnecessary print statement (#233),Nate Cook,natecook@apple.com,2020-08-28 16:37:31-05:00,18000,GitHub,noreply@github.com,2020-08-28 16:37:31-05:00,18000,True,False,1,1,0,1,main,Tests/ArgumentParserUnitTests/CompletionScriptTests.swift,06c44f562984a1216154e3bb86780d770ec9cc00,0.0,0.0,0.0
db24cb1275f5ad471ece151614f3f883235f012f,"Improve parsing performance (#234)

* Convert some linear operations to constant time

* Temporary test command for performance testing

* Improve SplitArguments docs

* Re-enable split arguments unit test

* Restore repeat example",Nate Cook,natecook@apple.com,2020-09-01 09:31:42-05:00,18000,GitHub,noreply@github.com,2020-09-01 09:31:42-05:00,18000,True,False,159,247,88,7,main,"Sources/ArgumentParser/Parsing/ArgumentDecoder.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/ParsedValues.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Tests/ArgumentParserEndToEndTests/ShortNameEndToEndTests.swift, Tests/ArgumentParserUnitTests/SplitArgumentTests.swift",365ca6a987427aa05785e0913dbba87ffea0da89,0.631578947368421,1.0,1.0
344537137b1503b78e84d7bb3297499813cf5b51,"Flatten the ArgumentSet storage into a single array (#235)

This removes the nesting inside the ArgumentSet data structure, which
had semantic meaning in an earlier version. This flattening, plus a
switch to using dictionary lookup instead of linear scanning, provides
another performance boost.",Nate Cook,natecook@apple.com,2020-09-01 21:07:35-05:00,18000,GitHub,noreply@github.com,2020-09-01 21:07:35-05:00,18000,True,False,165,42,-123,10,main,"Sources/ArgumentParser/CMakeLists.txt, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsable Types/ParsableArgumentsValidation.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/Name.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift",db24cb1275f5ad471ece151614f3f883235f012f,0.9285714285714286,0.5238095238095238,0.0
c34703022caee33d5e93f8d8e48f05ef76071b99,Re-enable a short option pack test (#236),Nate Cook,natecook@apple.com,2020-09-02 10:29:21-05:00,18000,GitHub,noreply@github.com,2020-09-02 10:29:21-05:00,18000,True,False,5,5,0,1,main,Tests/ArgumentParserEndToEndTests/ShortNameEndToEndTests.swift,344537137b1503b78e84d7bb3297499813cf5b51,0.0,1.0,1.0
92646c0cdbaca076c8d3d0207891785b3379cbff,Update changelog for 0.3.1 release (#237),Nate Cook,natecook@apple.com,2020-09-02 10:41:59-05:00,18000,GitHub,noreply@github.com,2020-09-02 10:41:59-05:00,18000,True,False,1,19,18,1,main,CHANGELOG.md,c34703022caee33d5e93f8d8e48f05ef76071b99,,,
c17e00a3bf6bcc0d461912cc339c44fca7bc070d,Store mutations made by validate() (#239),Elliott Williams,emw@yelp.com,2020-09-18 09:55:07-07:00,25200,GitHub,noreply@github.com,2020-09-18 11:55:07-05:00,18000,True,False,0,28,28,2,main,"Sources/ArgumentParser/Parsing/CommandParser.swift, Tests/ArgumentParserEndToEndTests/ValidationEndToEndTests.swift",92646c0cdbaca076c8d3d0207891785b3379cbff,0.8,0.8,1.0
cb1f0456acbc252e7a884b699a73fc343305700c,"Fix CMake build on Linux (#238)

- TestHelpers has a implicit dependency on Foundation through
  ArgumentParser, so it needs to link against Foundation
- The find package calls should be REQUIRED and CONFIG so they can take
  advantage of CMake configs",Gwen Mittertreiner,gwen.mittertreiner@gmail.com,2020-09-19 20:07:31-07:00,25200,GitHub,noreply@github.com,2020-09-19 22:07:31-05:00,18000,True,False,4,5,1,2,main,"CMakeLists.txt, Sources/ArgumentParserTestHelpers/CMakeLists.txt",c17e00a3bf6bcc0d461912cc339c44fca7bc070d,,,
3cc904427fdbca3319b390c5e87e43872c701e15,Update reference to `master` branch (#242),Nate Cook,natecook@apple.com,2020-09-24 14:59:35-05:00,18000,GitHub,noreply@github.com,2020-09-24 14:59:35-05:00,18000,True,False,5,5,0,4,main,".github/ISSUE_TEMPLATE/BUG_REPORT.md, CHANGELOG.md, Documentation/03 Commands and Subcommands.md, README.md",cb1f0456acbc252e7a884b699a73fc343305700c,,,
d424bca0ec66ec0e3888ebdc118379d348a67da3,"Make it clear that Foundation has to be imported (#246)

It's not from the get-go clear for beginners that Foundation has to be imported as well. Otherwise, you would end up with a bunch of compilation errors.",Johannes G,gruen.johannes@gmx.de,2020-10-06 09:05:25+02:00,-7200,GitHub,noreply@github.com,2020-10-06 02:05:25-05:00,18000,True,False,0,3,3,1,main,Documentation/01 Getting Started.md,3cc904427fdbca3319b390c5e87e43872c701e15,,,
8492882b030ad1c8e0bb4ca9d9ce06b07a8150b2,"Windows: migrate to `CRT` from `MSVCRT` (#249)

The Windows environment calls the library `CRT`.  This also enables the
removal of the `visualc` module from the Swift SDK overlay.",Saleem Abdulrasool,compnerd@compnerd.org,2020-10-20 11:14:22-07:00,25200,GitHub,noreply@github.com,2020-10-20 13:14:22-05:00,18000,True,False,8,8,0,4,main,"Sources/ArgumentParser/Completions/CompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/Errors.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift",d424bca0ec66ec0e3888ebdc118379d348a67da3,,,
bb370a320b229aa8f9eb0352d4fbc6e9874325f8,Fix small typo in `CommandConfiguration` documentation (#252),CypherPoet,CypherPoet@gmail.com,2020-10-28 10:17:11-05:00,18000,GitHub,noreply@github.com,2020-10-28 10:17:11-05:00,18000,True,False,1,1,0,1,main,Sources/ArgumentParser/Parsable Types/CommandConfiguration.swift,8492882b030ad1c8e0bb4ca9d9ce06b07a8150b2,,,
d633b4370ee0cfc03e584084bf4ab6d4e83c037d,[Windows] Don't try to detect shell. (#253),Daniel Müllenborn,damuellen@aol.com,2020-11-02 08:32:58+01:00,-3600,GitHub,noreply@github.com,2020-11-02 01:32:58-06:00,21600,True,False,0,4,4,1,main,Sources/ArgumentParser/Completions/CompletionsGenerator.swift,bb370a320b229aa8f9eb0352d4fbc6e9874325f8,1.0,1.0,1.0
53555a04503c175eaffcf587e4b8c380a7c41a5c,"Support Exit codes from thrown CustomNSError conformers (#244)

Introduce customnserror support, so exit code is calculated correctly, resolves #243.",Sergey Petrachkov,petrachkovsergey@gmail.com,2020-11-05 22:37:36+03:00,-10800,GitHub,noreply@github.com,2020-11-05 13:37:36-06:00,21600,True,False,0,63,63,2,main,"Sources/ArgumentParser/Usage/MessageInfo.swift, Tests/ArgumentParserUnitTests/ExitCodeTests.swift",d633b4370ee0cfc03e584084bf4ab6d4e83c037d,0.6086956521739131,1.0,1.0
4273ad222e6c51969e8585541f9da5187ad94e47,"Add support for Apple Silicon in SwiftSupport.cmake (#257)

This matches the behavior of [a similar `elseif` branch in the Swift toolchain itself](https://github.com/apple/swift/blob/b80e4bf8f866be26a4108bd92f97b2a182662642/CMakeLists.txt#L594).",Max Desiatov,max@desiatov.com,2020-12-10 22:02:33+00:00,0,GitHub,noreply@github.com,2020-12-10 16:02:33-06:00,21600,True,False,0,2,2,1,main,cmake/modules/SwiftSupport.cmake,53555a04503c175eaffcf587e4b8c380a7c41a5c,,,
41f5fe52a34b2c7b9938996387fabfaca21918bd,Gave a more descriptive error message for when a non-argument variable causes a parsing failure. (#256),Drew McCormack,drewmccormack@mac.com,2021-01-05 17:22:31+01:00,-3600,GitHub,noreply@github.com,2021-01-05 10:22:31-06:00,21600,True,False,1,1,0,1,main,Sources/ArgumentParser/Usage/UsageGenerator.swift,4273ad222e6c51969e8585541f9da5187ad94e47,,,
9564d61b08a5335ae0a36f789a7d71493eacadfc,Update changelog for 0.3.2 release (#261),Nate Cook,natecook@apple.com,2021-01-15 23:46:48-06:00,21600,GitHub,noreply@github.com,2021-01-15 23:46:48-06:00,21600,True,False,1,30,29,1,main,CHANGELOG.md,41f5fe52a34b2c7b9938996387fabfaca21918bd,,,
d80c0172d8f5a1f707e8471bc0551f9833adbbfe,"Add custom helpNames support for Subcommand (#251)

If helpNames is not modified, Subcommand will inherit helpNames from its immediate parent.
The helpNames is generated from `commandStack: [ParsableCommand.Type]`.
`getHelpNames()` extension method of `Array` is order sensitive and assumes that the element of `commandStack`  at indexed `i` is the parent of the element at indexed `i+1`",Md Abir Hasan Zoha,abirhasanzoha@gmail.com,2021-01-16 11:53:39+06:00,-21600,GitHub,noreply@github.com,2021-01-15 23:53:39-06:00,21600,True,False,15,97,82,5,main,"Documentation/04 Customizing Help.md, Sources/ArgumentParser/Parsable Types/CommandConfiguration.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/ArgumentParserPackageManagerTests/HelpTests.swift",9564d61b08a5335ae0a36f789a7d71493eacadfc,1.0,1.0,1.0
2a4664a40b8156f113512f17c4e272cfa84b20e0,"Add support for joined short options (#240)

This supports joined arguments, like '-Ddebug' or '-v4'. Joined arguments
need to be explicitly declared as `.customShort(""D"", allowingJoined: true)`.",Nate Cook,natecook@apple.com,2021-01-16 00:18:23-06:00,21600,GitHub,noreply@github.com,2021-01-16 00:18:23-06:00,21600,True,False,13,329,316,9,main,"Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/NameSpecification.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/InputOrigin.swift, Sources/ArgumentParser/Parsing/Name.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Tests/ArgumentParserEndToEndTests/CMakeLists.txt, Tests/ArgumentParserEndToEndTests/JoinedEndToEndTests.swift",d80c0172d8f5a1f707e8471bc0551f9833adbbfe,0.3611111111111111,0.7986111111111112,0.8055555555555556
9fe9374a1fbf1f2364b7e4cbc8dfd4e970723f32,Remove deprecated property wrapper initializers (#262),Nate Cook,natecook@apple.com,2021-01-16 00:47:11-06:00,21600,GitHub,noreply@github.com,2021-01-16 00:47:11-06:00,21600,True,False,370,2,-368,6,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Tests/ArgumentParserEndToEndTests/SourceCompatEndToEndTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift",2a4664a40b8156f113512f17c4e272cfa84b20e0,1.0,0.0,0.0
75c4dcd2e7cd0878aa1d29e6b493a8abcd65d753,Use the correct help flag in error messages (#263),Nate Cook,natecook@apple.com,2021-01-16 02:32:24-06:00,21600,GitHub,noreply@github.com,2021-01-16 02:32:24-06:00,21600,True,False,18,34,16,6,main,"Documentation/04 Customizing Help.md, Sources/ArgumentParser/Parsable Types/CommandConfiguration.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserPackageManagerTests/HelpTests.swift",9fe9374a1fbf1f2364b7e4cbc8dfd4e970723f32,0.0,1.0,1.0
605a2330c5643bc12b6e4efab726b372c38b5c5d,Suppress hidden arguments from completion scripts (#271),Nate Cook,natecook@apple.com,2021-02-11 10:41:46-06:00,21600,GitHub,noreply@github.com,2021-02-11 10:41:46-06:00,21600,True,False,23,25,2,6,main,"Examples/math/main.swift, Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",75c4dcd2e7cd0878aa1d29e6b493a8abcd65d753,0.18181818181818182,0.9090909090909091,1.0
26114e5f963c8ab038632bda0ae6dec506fb1434,Remove extraneous debugging statement (#273),Nate Cook,natecook@apple.com,2021-02-11 10:53:39-06:00,21600,GitHub,noreply@github.com,2021-02-11 10:53:39-06:00,21600,True,False,2,0,-2,1,main,Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift,605a2330c5643bc12b6e4efab726b372c38b5c5d,,,
e99a8ef488533e3b331535902843230d2566d4ed,"Allow variable properties in parsable types (#268)

* Allow variable properties in parsable types

This captures the default value for non-parsable properties
when building the ArgumentSet, which in turn get set as initial
values before decoding.",Nate Cook,natecook@apple.com,2021-02-15 15:28:13-06:00,21600,GitHub,noreply@github.com,2021-02-15 15:28:13-06:00,21600,True,False,15,110,95,6,main,"Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/InputOrigin.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserEndToEndTests/SimpleEndToEndTests.swift",26114e5f963c8ab038632bda0ae6dec506fb1434,0.0,1.0,1.0
267558bb4dd72742352bea9293c00f8c149c911f,Beautify `NSError` cases when thrown 💄  (#272),Kenny,11343005+schlagelk@users.noreply.github.com,2021-02-15 16:17:13-07:00,25200,GitHub,noreply@github.com,2021-02-15 17:17:13-06:00,21600,True,False,1,13,12,2,main,"Sources/ArgumentParser/Usage/MessageInfo.swift, Tests/ArgumentParserUnitTests/ExitCodeTests.swift",e99a8ef488533e3b331535902843230d2566d4ed,1.0,1.0,1.0
5bfb39ac07561d05f23eb4f9ed48237674a1416e,"Generate useful synopsis for commands with many options (#275)

ArgumentParser is configured not to emit detailed synopsis when it would contain more than a dozen entries. This makes sense; however, eliding all information makes the synopsis rather useless.

While commands may have dozens of options, in most cases, only a few of them are required — so we can keep the synopsis short but still useful by only displaying the required parts.

* Include all positional arguments in shortened synopsis",Karoy Lorentey,klorentey@apple.com,2021-02-16 07:30:31-08:00,28800,GitHub,noreply@github.com,2021-02-16 09:30:31-06:00,21600,True,False,1,36,35,3,main,"Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserPackageManagerTests/HelpTests.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",267558bb4dd72742352bea9293c00f8c149c911f,0.35714285714285715,0.0,1.0
e5178a971d2c82b059a9966671b707e3e70b5384,"Remove special casing for CustomNSError (#276)

The error code in CustomNSError is actually _not_ appropriate to use as
the command's exit code.",Nate Cook,natecook@apple.com,2021-02-18 14:03:13-06:00,21600,GitHub,noreply@github.com,2021-02-18 14:03:13-06:00,21600,True,False,60,1,-59,2,main,"Sources/ArgumentParser/Usage/MessageInfo.swift, Tests/ArgumentParserUnitTests/ExitCodeTests.swift",5bfb39ac07561d05f23eb4f9ed48237674a1416e,0.391304347826087,0.0,0.0
b1380e7ec17c78426b9c0000fffdd01b52400c3e,Update CMake to Support AS Hosts (#280),Robert Widmann,devteam.codafi@gmail.com,2021-03-04 12:01:37-08:00,28800,GitHub,noreply@github.com,2021-03-04 12:01:37-08:00,28800,True,False,6,9,3,1,main,cmake/modules/SwiftSupport.cmake,e5178a971d2c82b059a9966671b707e3e70b5384,,,
69ddee8c323ed468539e3b05e8c01e3d5a37bf6a,Update changelog for 0.4.0 release (#281),Nate Cook,natecook@apple.com,2021-03-04 15:50:42-06:00,21600,GitHub,noreply@github.com,2021-03-04 15:50:42-06:00,21600,True,False,10,73,63,3,main,"CHANGELOG.md, Documentation/01 Getting Started.md, README.md",b1380e7ec17c78426b9c0000fffdd01b52400c3e,,,
26744de9d875f9062a61b12e8162617024e0125c,Fix zsh dashes in command names (#284),Alfredo Delli Bovi,alfredo.dellibovi@gmail.com,2021-03-06 20:10:43+01:00,-3600,GitHub,noreply@github.com,2021-03-06 13:10:43-06:00,21600,True,False,7,11,4,2,main,"Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",69ddee8c323ed468539e3b05e8c01e3d5a37bf6a,0.0,1.0,1.0
4793b0f4b9949868fbae906901bc55836ae71367,Include help text in error message when validation fails (#283),Alfredo Delli Bovi,alfredo.dellibovi@gmail.com,2021-03-06 20:11:58+01:00,-3600,GitHub,noreply@github.com,2021-03-06 13:11:58-06:00,21600,True,False,19,62,43,6,main,"Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserEndToEndTests/TransformEndToEndTests.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserExampleTests/RepeatExampleTests.swift, Tests/ArgumentParserExampleTests/RollDiceExampleTests.swift",26744de9d875f9062a61b12e8162617024e0125c,0.9090909090909091,0.6060606060606061,0.6363636363636364
380eb7237897b2b56728630460fd0d9b1efd4eca,"Don't error when decoding optional unparsed values (#286)

We're newly able to decode actual optional types due to allowing
unparsed variable properties. ""Normal"" optional values are still
wrapped in non-optional property wrappers, so ArgumentDecoder didn't
need to handle optional values until now. Fixes #285",Nate Cook,natecook@apple.com,2021-03-06 19:02:45-06:00,21600,GitHub,noreply@github.com,2021-03-06 19:02:45-06:00,21600,True,False,42,121,79,3,main,"Sources/ArgumentParser/Parsing/ArgumentDecoder.swift, Tests/ArgumentParserEndToEndTests/SimpleEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/UnparsedValuesEndToEndTest.swift",4793b0f4b9949868fbae906901bc55836ae71367,0.4838709677419355,1.0,1.0
831ed5e860a70e745bc1337830af4786b2576881,Update changelog for 0.4.1 release (#287),Nate Cook,natecook@apple.com,2021-03-08 15:00:41-06:00,21600,GitHub,noreply@github.com,2021-03-08 15:00:41-06:00,21600,True,False,1,20,19,1,main,CHANGELOG.md,380eb7237897b2b56728630460fd0d9b1efd4eca,,,
080372b7cd10fb51fc7f9500098ef96d753ec5d1,"Hide flag inversion when help is hidden (#289)

Fixes an issue where the inversion of a flag would not be hidden whe the ArgumentHelp shouldDisplay value is false.

Added a unit test to check for this behavior.",Mike Wermuth,werm098@gmail.com,2021-03-11 23:07:12-08:00,28800,GitHub,noreply@github.com,2021-03-12 01:07:12-06:00,21600,True,False,3,6,3,2,main,"Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",831ed5e860a70e745bc1337830af4786b2576881,,,
0fccec728db9675a666c15c9448504a6ad2784e2,"Remove .xcodesamplecode.plist, which prevents editing markdown from Xcode (#292)",Kyle Macomber,kmacomber@apple.com,2021-03-24 12:20:35-07:00,25200,GitHub,noreply@github.com,2021-03-24 14:20:35-05:00,18000,True,False,5,0,-5,1,main,,080372b7cd10fb51fc7f9500098ef96d753ec5d1,,,
b936799bcaa6c2e4fbb74507109f9b18d6650de3,"OpenBSD support. (#291)

On this platform, the TIOCGWINSZ ioctl identifier is a complex macro.
Since we don't have a C bridging header obviously available to get the
flattened value, supply is the flattened value obtained elsewhere. This
is of course brittle but this is the simplest way around this for now.

Additionally, ensure we support the platform architecture name, where
the x86_64 architecture is called amd64 instead.",3405691582,dsk@google.com,2021-03-29 13:46:26-04:00,14400,GitHub,noreply@github.com,2021-03-29 12:46:26-05:00,18000,True,False,0,8,8,2,main,"Sources/ArgumentParser/Usage/HelpGenerator.swift, cmake/modules/SwiftSupport.cmake",0fccec728db9675a666c15c9448504a6ad2784e2,0.0,1.0,1.0
bafa74a9e47345af8e2e457ee6cee6c575920a80,"Fix invalid state error when decoding an unparsed optional value (#290)

Fixes “Internal error. Invalid state while parsing command-line arguments.” that is encountered when an unparsed value is optional.

Root causes:
- `ParsedArgumentsContainer.decodeNil` returns false for optional values because it only does a `!contains(key)` check. This should instead return nil if the value of the element is nil.
- The decoder did not know about unparsed input origins that and would result in unexpected behavior when decoding nil default values.
- The `value` of `Mirror.Child` is defined as `Any` but this is confusing because the value could be `Optional<Any>` which is not equal to `nil` even when the `Optional` case is `.none`.

Co-authored-by: Mike <mike.wermuth@icloud.com>",Mike Wermuth,werm098@gmail.com,2021-04-14 23:07:24-07:00,25200,GitHub,noreply@github.com,2021-04-15 01:07:24-05:00,18000,True,False,17,293,276,10,main,"Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsing/ArgumentDecoder.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/InputOrigin.swift, Sources/ArgumentParser/Parsing/ParsedValues.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Utilities/MirrorExtensions.swift, Tests/ArgumentParserEndToEndTests/UnparsedValuesEndToEndTest.swift, Tests/ArgumentParserUnitTests/InputOriginTests.swift, Tests/ArgumentParserUnitTests/MirrorTests.swift",b936799bcaa6c2e4fbb74507109f9b18d6650de3,0.4797687861271676,1.0,0.9248554913294798
cdb0e715845bb0e83a5e5d5b5bca47856cf7808c,"Convert realValue method to function, update docs (#298)",Nate Cook,natecook@apple.com,2021-04-15 01:28:48-05:00,18000,GitHub,noreply@github.com,2021-04-15 01:28:48-05:00,18000,True,False,28,21,-7,3,main,"Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Tests/ArgumentParserUnitTests/MirrorTests.swift",bafa74a9e47345af8e2e457ee6cee6c575920a80,,,
f314199a3db41cc7d421b1d6d409a35cd0a237ed,"Exclude supercommands from help (#300)

* Ability to exclude super commands from --help",Miguel A. Perez Ojito,54909066+miggs597@users.noreply.github.com,2021-04-21 13:17:32-04:00,14400,GitHub,noreply@github.com,2021-04-21 12:17:32-05:00,18000,True,False,53,97,44,3,main,"Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",cdb0e715845bb0e83a5e5d5b5bca47856cf7808c,1.0,1.0,1.0
47bd06ebeff8146ecd0020809e186218b46f465f,Update changelog for 0.4.2 release (#302),Nate Cook,natecook@apple.com,2021-04-21 18:00:54-05:00,18000,GitHub,noreply@github.com,2021-04-21 18:00:54-05:00,18000,True,False,3,22,19,1,main,CHANGELOG.md,f314199a3db41cc7d421b1d6d409a35cd0a237ed,,,
ee32b809403dc77bded883194e3bbcb107be5104,Hide option group with new OptionGroup constructor (#301),Miguel A. Perez Ojito,54909066+miggs597@users.noreply.github.com,2021-04-24 22:28:10-04:00,14400,GitHub,noreply@github.com,2021-04-24 21:28:10-05:00,18000,True,False,5,55,50,7,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",47bd06ebeff8146ecd0020809e186218b46f465f,0.8125,0.0,1.0
986d191f94cec88f6350056da59c2e59e83d1229,Update changelog for 0.4.3 release (#305),Nate Cook,natecook@apple.com,2021-04-28 10:41:32-05:00,18000,GitHub,noreply@github.com,2021-04-28 10:41:32-05:00,18000,True,False,1,11,10,1,main,CHANGELOG.md,ee32b809403dc77bded883194e3bbcb107be5104,,,
267f707294e252bd2416d6b6d95f5a5cbc13f011,"Use custom help flags in completion scripts (#308)

* Standardize the help and version flag generation
* Simplify some help generation code
* Support custom help flags in completion scripts",Nate Cook,natecook@apple.com,2021-05-14 10:27:05-05:00,18000,GitHub,noreply@github.com,2021-05-14 10:27:05-05:00,18000,True,False,85,109,24,8,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",986d191f94cec88f6350056da59c2e59e83d1229,0.2972972972972973,0.2972972972972973,1.0
167704f261c839263db03d84055ce7aa0660c070,Ignore extra help flags when given with the 'help' subcommand (#309),Nate Cook,natecook@apple.com,2021-05-14 17:28:32-05:00,18000,GitHub,noreply@github.com,2021-05-14 17:28:32-05:00,18000,True,False,7,18,11,2,main,"Sources/ArgumentParser/Usage/HelpCommand.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift",267f707294e252bd2416d6b6d95f5a5cbc13f011,0.4,1.0,1.0
c002f406ac58dc955699122312cf4acd4d220826,"Capture values across multiple .upToNextOption option uses (#304)

This fixes a bug where an @Option array defined with the .upToNextOption
parsing strategy would only capture the last ""group"" of elements. e.g. in:

    example --test one two --test three four

the `--test` property would only have the value `[""three"", ""four""]`.

Fixes rdar://73908471",Nate Cook,natecook@apple.com,2021-05-14 21:39:51-05:00,18000,GitHub,noreply@github.com,2021-05-14 21:39:51-05:00,18000,True,False,12,8,-4,3,main,"Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserEndToEndTests/JoinedEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/RepeatingEndToEndTests.swift",167704f261c839263db03d84055ce7aa0660c070,1.0,1.0,1.0
992a7451d546ede8825284530ffdb541c9a316ef,Convert all public enums to structs (#299),Nate Cook,natecook@apple.com,2021-05-15 10:30:48-05:00,18000,GitHub,noreply@github.com,2021-05-15 10:30:48-05:00,18000,True,False,84,144,60,8,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Errors.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/NameSpecification.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Usage/MessageInfo.swift",c002f406ac58dc955699122312cf4acd4d220826,0.0,0.0,0.8333333333333334
959aa19cdfe1e7bffdd0bdd1c62cce33dcf653da,"Add test for issue #278 (#312)

It appears this issue was fixed some time in the past; closes #278.",Nate Cook,natecook@apple.com,2021-05-17 15:31:49-05:00,18000,GitHub,noreply@github.com,2021-05-17 15:31:49-05:00,18000,True,False,0,38,38,1,main,Tests/ArgumentParserUnitTests/HelpGenerationTests.swift,992a7451d546ede8825284530ffdb541c9a316ef,1.0,1.0,1.0
fe71d4007d87b54883cf3f79f24ef24d7dcff8d1,Allow changelog authors tool to work with other repos (#311),Nate Cook,natecook@apple.com,2021-05-17 15:32:17-05:00,18000,GitHub,noreply@github.com,2021-05-17 15:32:17-05:00,18000,True,False,10,12,2,1,main,Tools/changelog-authors/main.swift,959aa19cdfe1e7bffdd0bdd1c62cce33dcf653da,1.0,1.0,1.0
860afdad318c0e2e25084d73ca963d98c58f4997,"Clean up internal property nesting (#315)

- Removes one layer of help properties by directly including the members
  of ArgumentHelp in ArgumentDefinition.Help. This also results in the
  discussion field which previously existed in both structures, now
  having a single source of truth. Adds helper method for setting each
  of these members using an instance of ArgumentHelp. Makes previously
  optional Strings into plain Strings and updates points of use to check
  for the empty string case.",Rauhul Varma,rauhul@users.noreply.github.com,2021-05-20 14:03:19-10:00,36000,GitHub,noreply@github.com,2021-05-20 19:03:19-05:00,18000,True,False,36,67,31,11,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Sources/ArgumentParser/Utilities/CollectionExtensions.swift",fe71d4007d87b54883cf3f79f24ef24d7dcff8d1,0.6923076923076923,0.46153846153846156,1.0
f4353dbe3a6c371d7e2b3390dc06051152b65d42,"Simplify synopsis string generation (#316)

- Removes unused codepaths.
- Simplifies synopsis string codepaths by removing optionality. This
  complexity is moved to the caller who is now responsible for filtering
  out hidden arguments and options. This change is desirable as it
  allows the caller to determine if the argument should be hidden. For
  example, while it makes sense to hide arguments in help text, it may
  not make sense to hide them when dumping the arguments for another
  tool to consume.",Rauhul Varma,rauhul@users.noreply.github.com,2021-05-22 05:59:37-10:00,36000,GitHub,noreply@github.com,2021-05-22 10:59:37-05:00,18000,True,False,106,105,-1,7,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/CompletionsGenerator.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/Name.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift",860afdad318c0e2e25084d73ca963d98c58f4997,0.0,1.0,0.5
615c9464b8fd3fc6ffea6a253b21034d5c044963,build: update the build rules for ArgumentParser (#318),Saleem Abdulrasool,compnerd@compnerd.org,2021-05-22 12:31:05-07:00,25200,GitHub,noreply@github.com,2021-05-22 12:31:05-07:00,25200,True,False,0,1,1,1,main,Sources/ArgumentParser/CMakeLists.txt,f4353dbe3a6c371d7e2b3390dc06051152b65d42,,,
e566395765da4c5b963f43f90f83074494324d28,Fix custom completion args for bash (#320),François Lamboley,Frizlab@users.noreply.github.com,2021-06-04 16:53:48+02:00,-7200,GitHub,noreply@github.com,2021-06-04 09:53:48-05:00,18000,True,False,4,4,0,2,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift",615c9464b8fd3fc6ffea6a253b21034d5c044963,,,
91fbf3887d391ea05dd69fb65551927a080edf49,Fix default value description for URL (#321),François Lamboley,Frizlab@users.noreply.github.com,2021-06-04 16:59:00+02:00,-7200,GitHub,noreply@github.com,2021-06-04 09:59:00-05:00,18000,True,False,2,2,0,1,main,Tests/ArgumentParserUnitTests/HelpGenerationTests.swift,e566395765da4c5b963f43f90f83074494324d28,,,
530a75455555f9342f46d00f36cc92be76591abf,Included help message when a required value is missing. (#324),Gonzalo RH,gonzalorehu@gmail.com,2021-06-09 11:28:00-05:00,18000,GitHub,noreply@github.com,2021-06-09 11:28:00-05:00,18000,True,False,0,26,26,4,main,"Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserExampleTests/RepeatExampleTests.swift, Tests/ArgumentParserExampleTests/RollDiceExampleTests.swift, Tests/ArgumentParserPackageManagerTests/HelpTests.swift",91fbf3887d391ea05dd69fb65551927a080edf49,0.8636363636363636,1.0,1.0
37610bc875150dbe28bf3ecf8be96b79aebe0442,Fix executable path when calling custom completion in bash (#323),François Lamboley,Frizlab@users.noreply.github.com,2021-06-10 18:07:02+02:00,-7200,GitHub,noreply@github.com,2021-06-10 11:07:02-05:00,18000,True,False,6,4,-2,2,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift",530a75455555f9342f46d00f36cc92be76591abf,1.0,1.0,0.0
1529e40774c23861fcfe8d118fc37f1f279fd57e,[documentation] Fix guard syntax error in 06 Manual Parsing and Testing (#329),Ian,52051793+atierian@users.noreply.github.com,2021-06-21 12:18:33-04:00,14400,GitHub,noreply@github.com,2021-06-21 11:18:33-05:00,18000,True,False,1,1,0,1,main,Documentation/06 Manual Parsing and Testing.md,37610bc875150dbe28bf3ecf8be96b79aebe0442,,,
23f7265cd622c892c7c2311b335060b896ef01fb,"Stop parsing earlier when a catch-all argument is present (#333)

If a command defines an @Argument property with the .unconditionalRemaining
parsing strategy, we need to stop parsing input when we encounter either a
positional argument or an unrecognized option/flag label. Note that this is
a change in behavior, as seen in the modified test.",Nate Cook,natecook@apple.com,2021-07-02 17:39:30-05:00,18000,GitHub,noreply@github.com,2021-07-02 17:39:30-05:00,18000,True,False,15,62,47,3,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserEndToEndTests/RepeatingEndToEndTests.swift",1529e40774c23861fcfe8d118fc37f1f279fd57e,0.0,0.6363636363636364,1.0
cfcb9cb0cd6f0aef657d9c26ff28db8e2d14369e,"Add new built-in flag `--dump-help` (#310)

This commit will add a new builtin option named `--dump-help-info` which
outputs help information in JSON.",Kotaro Suto,ng1a5ss43@gmail.com,2021-07-08 03:09:21+09:00,-32400,GitHub,noreply@github.com,2021-07-07 13:09:21-05:00,18000,True,False,10,1070,1060,13,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/Errors.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Usage/DumpHelpInfoGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift, Tests/ArgumentParserUnitTests/DumpHelpGenerationTests.swift",23f7265cd622c892c7c2311b335060b896ef01fb,0.34513274336283184,0.831858407079646,0.911504424778761
19a5e2aca4dd766232310b031e5aa43d59ee8912,"build: update CMakeLists.txt for new source (#336)

Repair the build after #310 to allow building with CMake which is required for bootstrapping.",Saleem Abdulrasool,compnerd@compnerd.org,2021-07-09 08:28:53-07:00,25200,GitHub,noreply@github.com,2021-07-09 10:28:53-05:00,18000,True,False,0,1,1,1,main,Sources/ArgumentParser/CMakeLists.txt,cfcb9cb0cd6f0aef657d9c26ff28db8e2d14369e,,,
685341f6299e3f276a523b44a44d97f375c84884,"Use standard path for --dump-help help/completions, remove completions (#339)",Nate Cook,natecook@apple.com,2021-07-20 12:59:36-05:00,18000,GitHub,noreply@github.com,2021-07-20 12:59:36-05:00,18000,True,False,25,27,2,6,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",19a5e2aca4dd766232310b031e5aa43d59ee8912,1.0,1.0,1.0
d4d1879c9de3f953c70c1236617d9169f767a1a8,"Propogate ExpressibleByArgument conformance (#341)

- Adds an overload of ArgumentDefinition.init with a generic constraint
  on ExpressibleByArgument that propogates the conformance to the
  construction of ArgumentDefinition.Help. This allows the
  allValueStrings of the type conforming to ExpressibleByArgument to
  become the allValues property of the help object.",Rauhul Varma,rauhul@users.noreply.github.com,2021-07-29 11:23:50-07:00,25200,GitHub,noreply@github.com,2021-07-29 13:23:50-05:00,18000,True,False,9,60,51,3,main,"Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",685341f6299e3f276a523b44a44d97f375c84884,1.0,1.0,0.5
6619de698b7f4364460384cfd89f8d0139ac4217,"Work around runtime issue introduced in 0.4.3 (#342)

* Add dummy property as workaround for #338

The addition of _hiddenFromHelp to OptionGroup in 0.4.3 triggered
a Swift IRGen issue. Adding this dummy variable works around the
issue in at least some cases.

* Don't include _hiddenFromHelp props in other property wrappers

This resolves another crashing issue described in rdar://80796582,
where defining an OptionGroup that isn't used results in a runtime
segfault when compiled in release mode.",Nate Cook,natecook@apple.com,2021-07-30 12:15:08-05:00,18000,GitHub,noreply@github.com,2021-07-30 12:15:08-05:00,18000,True,False,6,11,5,5,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift",d4d1879c9de3f953c70c1236617d9169f767a1a8,,,
b3bef589852dd852151170d22f8b65bb5440b82c,"Improvements to `--dump-help` (#335)

- Removes `HelpInfo` in favor of a recursively defined `CommandInfo`
  which contains more raw metadata about the source command.
  Additionally, introduces a top level `ToolInfo` type with a
  serialization version to aid future tooling.

- Updates tests to match the new serialized format.

- Renames `DumpHelpInfoGenerator` to `DumpHelpGenerator` to align the
  type with the `--dump-help` flag.",Rauhul Varma,rauhul@users.noreply.github.com,2021-08-26 12:21:45-07:00,25200,GitHub,noreply@github.com,2021-08-26 14:21:45-05:00,18000,True,False,770,1560,790,10,main,"Package.swift, Sources/ArgumentParser/CMakeLists.txt, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/DumpHelpGenerator.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Sources/ArgumentParserToolInfo/ToolInfo.swift, Tests/ArgumentParserUnitTests/DumpHelpGenerationTests.swift",6619de698b7f4364460384cfd89f8d0139ac4217,0.7096774193548387,0.7096774193548387,0.0
eef1f7590aa2578305daae01daf7cf4e482e24c8,"build: repair the build of ArgumentParser with CMake (#349)

The changes in #335 introduced a new library but failed to actually
build the library and update the dependency structure.  Update the build
system to build and install the new target.",Saleem Abdulrasool,compnerd@compnerd.org,2021-08-30 16:17:52-07:00,25200,GitHub,noreply@github.com,2021-08-30 18:17:52-05:00,18000,True,False,1,14,13,3,main,"Sources/ArgumentParser/CMakeLists.txt, Sources/ArgumentParserToolInfo/CMakeLists.txt, Sources/CMakeLists.txt",b3bef589852dd852151170d22f8b65bb5440b82c,,,
9b6827d34862cf6154df458c10e2646678278cf1,"Mark the dump help feature as experimental for now (#350)

* Mark `--dump-help` as experimental
* Mark the dumpHelp method as underscored",Nate Cook,natecook@apple.com,2021-09-01 16:42:17-05:00,18000,GitHub,noreply@github.com,2021-09-01 16:42:17-05:00,18000,True,False,14,12,-2,6,main,"Sources/ArgumentParser/Parsable Properties/Errors.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserUnitTests/DumpHelpGenerationTests.swift",eef1f7590aa2578305daae01daf7cf4e482e24c8,,,
6b2aa2748a7881eebb9f84fb10c01293e15b52ca,Update CHANGELOG for release 0.5.0 (#351),Nate Cook,natecook@apple.com,2021-09-03 12:30:52-05:00,18000,GitHub,noreply@github.com,2021-09-03 12:30:52-05:00,18000,True,False,5,79,74,3,main,"CHANGELOG.md, Documentation/01 Getting Started.md, README.md",9b6827d34862cf6154df458c10e2646678278cf1,,,
d4dd8e7c23aa7625194e14b27485527522034258,remove extra @_spi (#352),Rauhul Varma,rauhul@users.noreply.github.com,2021-09-09 11:54:58-07:00,25200,GitHub,noreply@github.com,2021-09-09 13:54:58-05:00,18000,True,False,1,1,0,1,main,Sources/ArgumentParserTestHelpers/TestHelpers.swift,6b2aa2748a7881eebb9f84fb10c01293e15b52ca,,,
397d704f05751624711caa93064aaa810a9b2032,Add DocC documentation bundle. (#347),Nate Cook,natecook@apple.com,2021-09-10 12:50:42-05:00,18000,GitHub,noreply@github.com,2021-09-10 12:50:42-05:00,18000,True,False,101,514,413,19,main,"Package@swift-5.5.swift, Sources/ArgumentParser/Documentation.docc/ArgumentParser.md, Sources/ArgumentParser/Documentation.docc/Articles/CommandsAndSubcommands.md, Sources/ArgumentParser/Documentation.docc/Articles/CustomizingCompletions.md, Sources/ArgumentParser/Documentation.docc/Articles/CustomizingHelp.md, Sources/ArgumentParser/Documentation.docc/Articles/DeclaringArguments.md, Sources/ArgumentParser/Documentation.docc/Articles/GettingStarted.md, Sources/ArgumentParser/Documentation.docc/Articles/InstallingCompletionScripts.md, Sources/ArgumentParser/Documentation.docc/Articles/ManualParsing.md, Sources/ArgumentParser/Documentation.docc/Articles/Validation.md, Sources/ArgumentParser/Documentation.docc/Extensions/Argument.md, Sources/ArgumentParser/Documentation.docc/Extensions/Flag.md, Sources/ArgumentParser/Documentation.docc/Extensions/Option.md, Sources/ArgumentParser/Documentation.docc/Extensions/ParsableArguments.md, Sources/ArgumentParser/Documentation.docc/Extensions/ParsableCommand.md, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/NameSpecification.swift, Sources/ArgumentParser/Parsable Properties/Option.swift",d4dd8e7c23aa7625194e14b27485527522034258,,,
b77ea81c44ef03a60bd18624e7f6090190f19003,"Fix parsing for single-dash names with .upToNextOption parsing (#353)

* Correctly track used input origins for single-dash options

When capturing the values for an option with a single-dash with the .upToNextOption
parsing strategy, the parser was stopping its search for values when it encountered
the ""unpacked"" short option candidates. This change removes the single-dash option
before looking for values, which strips those short options (e.g. -h) from
consideration. Fixes #327.",Nate Cook,natecook@apple.com,2021-09-10 17:54:35-05:00,18000,GitHub,noreply@github.com,2021-09-10 17:54:35-05:00,18000,True,False,0,32,32,2,main,"Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserEndToEndTests/LongNameWithShortDashEndToEndTests.swift",397d704f05751624711caa93064aaa810a9b2032,0.7142857142857143,0.7142857142857143,0.7142857142857143
ddd45aa2e03d704161f44eab2ba985c51ff856c9,Remove unavailable symbols (#354),Nate Cook,natecook@apple.com,2021-09-10 18:30:09-05:00,18000,GitHub,noreply@github.com,2021-09-10 18:30:09-05:00,18000,True,False,91,0,-91,1,main,Sources/ArgumentParser/Parsable Properties/Flag.swift,b77ea81c44ef03a60bd18624e7f6090190f19003,,,
fd4c3b68a0c04c4c6cda27f0213c3703d50080e8,Prepare for 1.0 release (#355),Nate Cook,natecook@apple.com,2021-09-10 19:04:33-05:00,18000,GitHub,noreply@github.com,2021-09-10 19:04:33-05:00,18000,True,False,44,53,9,4,main,"CHANGELOG.md, Package@swift-5.5.swift, README.md, Sources/ArgumentParser/Documentation.docc/Extensions/Flag.md",ddd45aa2e03d704161f44eab2ba985c51ff856c9,,,
afe0b9588ef38957d7664fd55344f2e84f929b1b,"Fix compile failure on iOS for Mac Catalyst support (#356)

* Fix compile failure on iOS

* Add sortedKeys API check for tvOS and watchOS",Yi Xie,imxieyi@users.noreply.github.com,2021-09-13 23:24:33+02:00,-7200,GitHub,noreply@github.com,2021-09-13 16:24:33-05:00,18000,True,False,1,1,0,1,main,Sources/ArgumentParser/Usage/DumpHelpGenerator.swift,fd4c3b68a0c04c4c6cda27f0213c3703d50080e8,,,
d2930e8fcf9c33162b9fcc1d522bc975e2d4179b,Update CHANGELOG for release 1.0.1 (#357),Nate Cook,natecook@apple.com,2021-09-14 09:46:59-05:00,18000,GitHub,noreply@github.com,2021-09-14 09:46:59-05:00,18000,True,False,1,11,10,1,main,CHANGELOG.md,afe0b9588ef38957d7664fd55344f2e84f929b1b,,,
b2e411887ec36f7736dd059438d061e3288ddce0,Fix compile failure on iOS for Mac Catalyst support (#372),Jake Petroules,jake.petroules@apple.com,2021-11-08 17:50:43-08:00,28800,GitHub,noreply@github.com,2021-11-08 19:50:43-06:00,21600,True,False,52,60,8,4,main,"Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserExampleTests/RepeatExampleTests.swift, Tests/ArgumentParserExampleTests/RollDiceExampleTests.swift",d2930e8fcf9c33162b9fcc1d522bc975e2d4179b,,,
e1465042f195f374b94f915ba8ca49de24300a0d,Update CHANGELOG for release 1.0.2 (#373),Nate Cook,natecook@apple.com,2021-11-10 11:04:24-06:00,21600,GitHub,noreply@github.com,2021-11-10 11:04:24-06:00,21600,True,False,1,11,10,1,main,CHANGELOG.md,b2e411887ec36f7736dd059438d061e3288ddce0,,,
d7f63849fb9a3410c087b3c0920fd6cf7057f8ab,Updated the zsh completions to escape the command name for a custom completion. (#364),Craig Siemens,siemens.craig@gmail.com,2021-12-07 09:47:43-07:00,25200,GitHub,noreply@github.com,2021-12-07 10:47:43-06:00,21600,True,False,1,5,4,2,main,"Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",e1465042f195f374b94f915ba8ca49de24300a0d,,,
7e04f56c1db6e92f18e753c7e46c6a35b030f41b,"Rename `...using_command` fish function, set `$cmd` in local scope (#377)

__fish_* should not be used by external projects.
set -l cmd in case user has a global or universal `cmd` defined.",Aaron Gyes,var.log@icloud.com,2021-12-10 11:31:20-08:00,28800,GitHub,noreply@github.com,2021-12-10 13:31:20-06:00,21600,True,False,49,49,0,3,main,"Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",d7f63849fb9a3410c087b3c0920fd6cf7057f8ab,,,
3bbfafecde327420345785ac0c8ac7cbe364dcc7,Fix various broken links in documentation articles. (#362),Ian Saultz,52051793+atierian@users.noreply.github.com,2021-12-16 09:09:09-05:00,18000,GitHub,noreply@github.com,2021-12-16 08:09:09-06:00,21600,True,False,5,5,0,3,main,"Sources/ArgumentParser/Documentation.docc/Articles/CustomizingHelp.md, Sources/ArgumentParser/Documentation.docc/Articles/DeclaringArguments.md, Sources/ArgumentParser/Documentation.docc/Articles/ManualParsing.md",7e04f56c1db6e92f18e753c7e46c6a35b030f41b,,,
e73578df2d30097b8847168cd6691c6ebbbf2f72,Update documentation cross-links (#383),Nate Cook,natecook@apple.com,2022-01-03 15:59:54-06:00,21600,GitHub,noreply@github.com,2022-01-03 15:59:54-06:00,21600,True,False,24,10,-14,5,main,"Sources/ArgumentParser/Documentation.docc/ArgumentParser.md, Sources/ArgumentParser/Documentation.docc/Articles/CustomizingHelp.md, Sources/ArgumentParser/Documentation.docc/Articles/DeclaringArguments.md, Sources/ArgumentParser/Documentation.docc/Articles/ManualParsing.md, Sources/ArgumentParser/Documentation.docc/Images/repeat.png",3bbfafecde327420345785ac0c8ac7cbe364dcc7,,,
90f76c14b43783ad3162c163ba9f6ac1b72f9a04,"List valid options in error messages (#382)

When an option value fails to parse, no custom error message is
provided, and a list of valid candidate values is available, include the
list as part of the error message.

Addresses #344.",Daniel Duan,daniel@duan.ca,2022-01-05 09:02:31-08:00,28800,GitHub,noreply@github.com,2022-01-05 11:02:31-06:00,21600,True,False,7,65,58,2,main,"Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserUnitTests/ErrorMessageTests.swift",e73578df2d30097b8847168cd6691c6ebbbf2f72,0.0,0.9565217391304348,0.9565217391304348
cca8f80939f43cb631f6a1c3e7003ce280831542,Add SwiftWasm support (#363),yonihemi,jonathan@hemi.dev,2022-01-06 23:56:44+08:00,-28800,GitHub,noreply@github.com,2022-01-06 09:56:44-06:00,21600,True,False,1,12,11,4,main,"Sources/ArgumentParser/Completions/CompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/Errors.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift",90f76c14b43783ad3162c163ba9f6ac1b72f9a04,0.5,1.0,1.0
020800d75c044572abc8553a1a5982a3d0eaa5e5,"Handle failures getting terminal size on windows (#386)

- Fixes #369
- Adds an error check for the return value of GetConsoleScreenBufferInfo
  Windows. If GetConsoleScreenBufferInfo a default size of 80 by 25 is
  used.",Rauhul Varma,rauhul@users.noreply.github.com,2022-01-10 13:18:52-08:00,28800,GitHub,noreply@github.com,2022-01-10 15:18:52-06:00,21600,True,False,2,3,1,1,main,Sources/ArgumentParser/Usage/HelpGenerator.swift,cca8f80939f43cb631f6a1c3e7003ce280831542,0.0,1.0,1.0
df75d7009ed04aed5d4bbf79d5f4a786caa87ba2,"Fix dump help crash (#387)

- Fixes #375
- Fixes a bug with the experimental dump help generator which would
  occur when a ParsableCommand has non-Argument properties.",Rauhul Varma,rauhul@users.noreply.github.com,2022-01-10 13:58:49-08:00,28800,GitHub,noreply@github.com,2022-01-10 15:58:49-06:00,21600,True,False,5,6,1,1,main,Sources/ArgumentParser/Usage/DumpHelpGenerator.swift,020800d75c044572abc8553a1a5982a3d0eaa5e5,0.0,0.0,0.0
00a86771caa3cd1ff4db09f4a2bd28c70fdc54cc,"Clean up help generation (#385)

- Adds check to ensure that `wrapped(to:wrappingIndent:)` doesn't
  attempt to retrieve a negative prefix.
- The Usage struct was composed of an array of strings which always
  contained exact one string at runtime. This struct has been removed
  and replaced with a single usage string.
- Removes HelpGenerator._screenWidthOverride in favor of explicitly
  setting the screen width in generateHelp calls.",Rauhul Varma,rauhul@users.noreply.github.com,2022-01-10 14:02:50-08:00,28800,GitHub,noreply@github.com,2022-01-10 16:02:50-06:00,21600,True,False,35,26,-9,4,main,"Sources/ArgumentParser/Usage/HelpCommand.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Utilities/StringExtensions.swift, Tests/ArgumentParserPackageManagerTests/HelpTests.swift",df75d7009ed04aed5d4bbf79d5f4a786caa87ba2,0.0,0.0,0.0
9e1448215699a8757d9729450e4b7a1951d8af2a,Correct Typos (#388),Matt Zanchelli,matt@mdznr.com,2022-01-11 17:47:13-05:00,18000,GitHub,noreply@github.com,2022-01-11 16:47:13-06:00,21600,True,False,13,13,0,9,main,"Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsing/InputOrigin.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Sources/ArgumentParser/Utilities/SequenceExtensions.swift, Tests/ArgumentParserEndToEndTests/ValidationEndToEndTests.swift",00a86771caa3cd1ff4db09f4a2bd28c70fdc54cc,,,
403d34dfe671b28502fa0d62a926ae7aa748dcd3,Add new documentation for experimental features (#360),Kotaro Suto,ng1a5ss43@gmail.com,2022-01-12 09:29:03-08:00,28800,GitHub,noreply@github.com,2022-01-12 11:29:03-06:00,21600,True,False,0,11,11,1,main,Sources/ArgumentParser/Documentation.docc/Articles/ExperimentalFeatures.md,9e1448215699a8757d9729450e4b7a1951d8af2a,,,
cc481f7d1cc911e96a9a403a9c2abeb69d337c2c,Add a link to ExperimentalFeatures.md (#389),Kotaro Suto,ng1a5ss43@gmail.com,2022-01-18 21:05:50-08:00,28800,GitHub,noreply@github.com,2022-01-18 23:05:50-06:00,21600,True,False,0,1,1,1,main,Sources/ArgumentParser/Documentation.docc/ArgumentParser.md,403d34dfe671b28502fa0d62a926ae7aa748dcd3,,,
4cdcc1781dafa7f4b9d64cd971498c538978a0fe,ArgumentHelp.Visibility levels API (#390),Adam,mcnight@mcnight.fr,2022-01-21 16:33:25+01:00,-3600,GitHub,noreply@github.com,2022-01-21 09:33:25-06:00,21600,True,False,7,73,66,4,main,"Sources/ArgumentParser/Documentation.docc/Articles/CustomizingHelp.md, Sources/ArgumentParser/Parsable Properties/ArgumentHelp.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",cc481f7d1cc911e96a9a403a9c2abeb69d337c2c,1.0,1.0,0.6071428571428571
2b352c08c252a1f4eb708afbefeefeace2f704fc,Deprecate Option initializer and add a new one with parameters in order (#391),Adam McNight,mcnight@mcnight.fr,2022-01-25 17:43:44+01:00,-3600,GitHub,noreply@github.com,2022-01-25 10:43:44-06:00,21600,True,False,2,36,34,2,main,"Sources/ArgumentParser/Parsable Properties/Option.swift, Tests/ArgumentParserEndToEndTests/DefaultsEndToEndTests.swift",4cdcc1781dafa7f4b9d64cd971498c538978a0fe,1.0,1.0,1.0
0b17e346422c94f23b7a876cb3876686bf46ea84,"Add links to the docs to the README (#396)

* Add links to docs to the README

* Light article revisions",Nate Cook,natecook@apple.com,2022-01-28 12:58:22-06:00,21600,GitHub,noreply@github.com,2022-01-28 12:58:22-06:00,21600,True,False,12,29,17,4,main,".gitignore, README.md, Sources/ArgumentParser/Documentation.docc/Articles/ExperimentalFeatures.md, Sources/ArgumentParser/Documentation.docc/Articles/ManualParsing.md",2b352c08c252a1f4eb708afbefeefeace2f704fc,,,
9a71866646c5fd5ab41ac0a7c9cbaf7ca3c081ee,"Harmonize Option initializers abstracts (#395)

Providing missing documentation to all completionKind parameters",Adam McNight,mcnight@mcnight.fr,2022-01-28 20:03:43+01:00,-3600,GitHub,noreply@github.com,2022-01-28 13:03:43-06:00,21600,True,False,0,8,8,1,main,Sources/ArgumentParser/Parsable Properties/Option.swift,0b17e346422c94f23b7a876cb3876686bf46ea84,,,
1a5b1b3c0341c052a31cf84c973afbf6b2787ae6,"Fix issue with unconditional remaining properties in subcommands (#397)

* Propagate unconditional remaining arguments to higher commands

This changes the behavior of parsing when a subcommand includes an
argument array with an unconditionalRemaining parsing strategy, such
that parsing options stops when the subcommand is encountered, so
that the subcommand can pick up those additional options.",Nate Cook,natecook@apple.com,2022-01-31 14:55:19-06:00,21600,GitHub,noreply@github.com,2022-01-31 14:55:19-06:00,21600,True,False,16,164,148,4,main,"Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Tests/ArgumentParserEndToEndTests/DefaultSubcommandEndToEndTests.swift",9a71866646c5fd5ab41ac0a7c9cbaf7ca3c081ee,0.16666666666666666,0.8589743589743589,1.0
577279444dc474622c24cb701a08095fcf4eba0d,Update changelog for 1.0.3 release (#399),Nate Cook,natecook@apple.com,2022-02-01 00:18:11-06:00,21600,GitHub,noreply@github.com,2022-02-01 00:18:11-06:00,21600,True,False,2,39,37,1,main,CHANGELOG.md,1a5b1b3c0341c052a31cf84c973afbf6b2787ae6,,,
5540737e97e8222102277d3af6bc4a0064556847,Add customization point for command usage text (#400),Nate Cook,natecook@apple.com,2022-02-11 13:41:27-06:00,21600,GitHub,noreply@github.com,2022-02-11 13:41:27-06:00,21600,True,False,25,218,193,8,main,"Sources/ArgumentParser/Documentation.docc/Articles/CustomizingHelp.md, Sources/ArgumentParser/Parsable Types/CommandConfiguration.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Utilities/StringExtensions.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift, Tests/ArgumentParserUnitTests/StringWrappingTests.swift",577279444dc474622c24cb701a08095fcf4eba0d,0.04040404040404041,0.9595959595959596,0.9595959595959596
b54737404930aedfe701983c34417d9af2709885,"Add --help-hidden for use with _hiddenFromHelp (#366)

Swift Package Manager adopted _hiddenFromHelp, the resulting help is
much more approachable for basic usage, but leaves no way to view
all the advanced options it accepts. This takes from swiftc's + clang's
playbook and adds a hidden `--help-hidden` flag that prints all help,
including those using `_hiddenFromHelp`",Keith Smiley,keithbsmiley@gmail.com,2022-02-11 12:25:22-08:00,28800,GitHub,noreply@github.com,2022-02-11 14:25:22-06:00,21600,True,False,10,116,106,10,main,"Sources/ArgumentParser/CMakeLists.txt, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/HelpHiddenCommand.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",5540737e97e8222102277d3af6bc4a0064556847,0.16666666666666666,0.5,1.0
1e6cf8bf251374f5568bf60caaf5f562a9585fb4,"Forward ArgumentVisibility to ArgumentDefinition (#406)

- Renames ArgumentHelp.Visibility to ArgumentVisibility.
- Replaces ArgumentDefinition.shouldDisplay with a visibility property
  whose value is derived from ArgumentHelp.visibility.",Rauhul Varma,rauhul@users.noreply.github.com,2022-02-11 22:54:20-08:00,28800,GitHub,noreply@github.com,2022-02-12 00:54:20-06:00,21600,True,False,25,36,11,10,main,"Sources/ArgumentParser/CMakeLists.txt, Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/ArgumentHelp.swift, Sources/ArgumentParser/Parsable Properties/ArgumentVisibility.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Usage/DumpHelpGenerator.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift",b54737404930aedfe701983c34417d9af2709885,,,
7fdd562901f9dc60f0399c373fb0e8f4a2703991,Update OptionGroup to use Visibility (#407),Rauhul Varma,rauhul@users.noreply.github.com,2022-02-12 14:34:05-08:00,28800,GitHub,noreply@github.com,2022-02-12 16:34:05-06:00,21600,True,False,25,51,26,3,main,"Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",1e6cf8bf251374f5568bf60caaf5f562a9585fb4,0.2857142857142857,0.42857142857142855,1.0
185b45fa064fada45379dae5062ae8b4dce2c1e2,Combine HelpCommand and HelpHiddenCommand (#408),Rauhul Varma,rauhul@users.noreply.github.com,2022-02-12 14:35:31-08:00,28800,GitHub,noreply@github.com,2022-02-12 16:35:31-06:00,21600,True,False,86,22,-64,8,main,"Sources/ArgumentParser/CMakeLists.txt, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Usage/HelpCommand.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift",7fdd562901f9dc60f0399c373fb0e8f4a2703991,0.2608695652173913,0.2608695652173913,0.0
63e6c57b63e208dbfe57fa034aceec4f9f04122e,Provide non-experimental help-hidden flags (#409),Rauhul Varma,rauhul@users.noreply.github.com,2022-02-12 14:50:09-08:00,28800,GitHub,noreply@github.com,2022-02-12 16:50:09-06:00,21600,True,False,22,47,25,4,main,"Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserPackageManagerTests/HelpTests.swift",185b45fa064fada45379dae5062ae8b4dce2c1e2,0.21739130434782608,1.0,1.0
e3673688cf193c6597bccadc8b527dedb072d5bd,"Add abillity to generate hidden help (#410)

- Updates helpMessage(columns:) and helpMessage(for:columns:) with an
  includeHidden argument defaulted to false to allow for clients to
  programmatically generate hidden help.",Rauhul Varma,rauhul@users.noreply.github.com,2022-02-12 16:11:07-08:00,28800,GitHub,noreply@github.com,2022-02-12 16:11:07-08:00,28800,True,False,59,130,71,7,main,"Sources/ArgumentParser/Documentation.docc/Extensions/ParsableArguments.md, Sources/ArgumentParser/Documentation.docc/Extensions/ParsableCommand.md, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",63e6c57b63e208dbfe57fa034aceec4f9f04122e,1.0,1.0,0.5238095238095238
e344426b07922a82e60d53c9fae6f6a4e30bb881,Add documentation comments to generateHelpNames (#411),Rauhul Varma,rauhul@users.noreply.github.com,2022-02-14 11:17:06-08:00,28800,GitHub,noreply@github.com,2022-02-14 13:17:06-06:00,21600,True,False,1,11,10,1,main,Sources/ArgumentParser/Usage/HelpGenerator.swift,e3673688cf193c6597bccadc8b527dedb072d5bd,,,
e7765e1f396716d97a352ba0b996fc0b8b933ff1,"Replace createHelp and includeHidden (#405)

- Replaces `ArgumentSet.init(_:creatingHelp:includeHidden:)` with
  `ArgumentSet.init(_:visibility:)`. `visibility` intentionally does not
  have a default value to ensure that callers only have the correct
  arguments. As part of this change `includeHidden` has been replaced
  throughout the codebase with `visibility`. This change also fixes a
  bug where arguments with hidden `visibility` were being displayed in the
  generated command usage string.",Rauhul Varma,rauhul@users.noreply.github.com,2022-02-14 21:54:57-08:00,28800,GitHub,noreply@github.com,2022-02-14 23:54:57-06:00,21600,True,False,43,94,51,14,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/ArgumentVisibility.swift, Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Usage/DumpHelpGenerator.swift, Sources/ArgumentParser/Usage/HelpCommand.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",e344426b07922a82e60d53c9fae6f6a4e30bb881,0.0,1.0,1.0
88af18f986ae0a60cbc7fa8356a0067826871e7e,"Change ArgumentVisibility into a struct (#413)

- Changes ArgumentVisibility from an enum to a struct. This will allow
  ArgumentParser to add cases in the future without breaking clients
  that could have been exhaustively switching across all cases. It also
  allows us to implement protocol conformances on the internal type and
  avoid exposing them on the public type.",Rauhul Varma,rauhul@users.noreply.github.com,2022-02-15 10:55:27-08:00,28800,GitHub,noreply@github.com,2022-02-15 12:55:27-06:00,21600,True,False,25,37,12,10,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/ArgumentHelp.swift, Sources/ArgumentParser/Parsable Properties/ArgumentVisibility.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/DumpHelpGenerator.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift",e7765e1f396716d97a352ba0b996fc0b8b933ff1,,,
4de228195c63460feed68744a757f1d0b39c729e,"Show hidden args/opts/flags with --help-hidden (#412)

- Make ArgumentSet(_:visibility:) filter correctly
  The ArgumentSet initializer was previously only filtering out option
  groups with visibility lower than requested. With this change, the
  resulting ArgumentSet only includes values that are valid for display.
  In addition, this moves the visibility parameter out of
  UsageGenerator.synopsis(); that type needs to have the correct
  visibility level at initialization.

- Mark non-parsed properties as private
  This applies to properties that are defined without a property
  wrapper. This kind of property should never be included in the help,
  since they aren't included in the command-line tool's UI.",Nate Cook,natecook@apple.com,2022-02-15 14:57:43-06:00,21600,GitHub,noreply@github.com,2022-02-15 14:57:43-06:00,21600,True,False,54,65,11,6,main,"Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",88af18f986ae0a60cbc7fa8356a0067826871e7e,1.0,1.0,0.0
b3a9c24f15db8df15f39cf9d1f7447fe0f1f43c4,Delete `let` to make this code snippet build. (#415),Zsolt Kiraly,zkiraly@gmail.com,2022-02-17 18:29:07-08:00,28800,GitHub,noreply@github.com,2022-02-17 20:29:07-06:00,21600,True,False,1,1,0,1,main,Sources/ArgumentParser/Documentation.docc/Articles/ManualParsing.md,4de228195c63460feed68744a757f1d0b39c729e,,,
c959b3a5d2e301c934c74d3fbb176bd717bfaf5f,"Hide optional flags when a command has too many options (#416)

The usage string feature that only shows positional args and required
options/flags was incorrectly allowing through flags with type
`Bool?`.",Nate Cook,natecook@apple.com,2022-03-07 18:40:34-06:00,21600,GitHub,noreply@github.com,2022-03-07 18:40:34-06:00,21600,True,False,5,36,31,3,main,"Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",b3a9c24f15db8df15f39cf9d1f7447fe0f1f43c4,,,
6f30db08e60f35c1c89026783fe755129866ba5e,Don't trigger help for unconditional remaining commands (#417),Nate Cook,natecook@apple.com,2022-03-12 12:33:19-06:00,21600,GitHub,noreply@github.com,2022-03-12 12:33:19-06:00,21600,True,False,4,33,29,3,main,"Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Tests/ArgumentParserEndToEndTests/DefaultSubcommandEndToEndTests.swift",c959b3a5d2e301c934c74d3fbb176bd717bfaf5f,0.0,0.7894736842105263,1.0
357c419ec98348cdd2a2aecaa2322d1298b63078,"Fix a typo and template links (#418)

`CONTRIBUTING.md` link with relative path is not accessible from
PR page.",Martin Pfundmair,dev@martin.pfundmair.de,2022-03-15 03:47:32+09:00,-32400,GitHub,noreply@github.com,2022-03-14 13:47:32-05:00,18000,True,False,3,3,0,3,main,".github/PULL_REQUEST_TEMPLATE.md, .github/PULL_REQUEST_TEMPLATE/NEW.md, Sources/ArgumentParser/Parsable Properties/Errors.swift",6f30db08e60f35c1c89026783fe755129866ba5e,,,
1141ed1e1bed46ab16b6c96bf5ba90b85f6a8997,"Support an `async` entry point for commands (#404)

Adds a new `AsyncParsableCommand` protocol, which provides a
`static func main() async` entry point and can call through to the root
command's or a subcommand's asynchronous `run()` method. For this
asynchronous execution, the root command must conform to `AsyncParsableCommand`,
but its subcommands can be a mix of asynchronous and synchronous commands.

Due to an issue in Swift 5.5, you can only use `@main` on an
`AsyncParsableCommand` root command starting in Swift 5.6.
This change also includes a workaround for clients that are using Swift 5.5.
Declare a separate type that conforms to `AsyncMainProtocol` and add the `@main`
attribute to that type.

```
@main enum Main: AsyncMain {
    typealias Command = <#command#>
}
```",Nate Cook,natecook@apple.com,2022-03-14 18:14:09-05:00,18000,GitHub,noreply@github.com,2022-03-14 18:14:09-05:00,18000,True,False,146,298,152,15,main,"Examples/count-lines/CountLines.swift, Examples/math/Math.swift, Examples/repeat/Repeat.swift, Package.swift, Sources/ArgumentParser/CMakeLists.txt, Sources/ArgumentParser/Parsable Types/AsyncParsableCommand.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserExampleTests/CountLinesExampleTests.swift, Tests/ArgumentParserExampleTests/CountLinesTest.txt, Tests/ArgumentParserExampleTests/RepeatExampleTests.swift, Tests/ArgumentParserExampleTests/RollDiceExampleTests.swift, Tools/changelog-authors/ChangelogAuthors.swift, Tools/changelog-authors/Models.swift, Tools/changelog-authors/Util.swift",357c419ec98348cdd2a2aecaa2322d1298b63078,0.5894736842105263,1.0,1.0
d7a5a794c5e04d6a48fb8d0caf58ba6affa8503e,Make `@OptionGroup(visibility:)` a public API (#419),Nate Cook,natecook@apple.com,2022-03-14 23:51:10-05:00,18000,GitHub,noreply@github.com,2022-03-14 23:51:10-05:00,18000,True,False,37,69,32,2,main,"Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",1141ed1e1bed46ab16b6c96bf5ba90b85f6a8997,0.85,0.0,0.0
d52044c091d2c02986dfd8c4ef183076ea2dc876,"Update documentation (#420)

Updated documentation for the 1.1 release.",Nate Cook,natecook@apple.com,2022-03-15 00:59:37-05:00,18000,GitHub,noreply@github.com,2022-03-15 00:59:37-05:00,18000,True,False,174,373,199,17,main,"Sources/ArgumentParser/Documentation.docc/ArgumentParser.md, Sources/ArgumentParser/Documentation.docc/Articles/CommandsAndSubcommands.md, Sources/ArgumentParser/Documentation.docc/Articles/CustomizingCommandHelp.md, Sources/ArgumentParser/Documentation.docc/Articles/CustomizingCompletions.md, Sources/ArgumentParser/Documentation.docc/Articles/CustomizingHelp.md, Sources/ArgumentParser/Documentation.docc/Articles/DeclaringArguments.md, Sources/ArgumentParser/Documentation.docc/Articles/GettingStarted.md, Sources/ArgumentParser/Documentation.docc/Articles/ManualParsing.md, Sources/ArgumentParser/Documentation.docc/Articles/Validation.md, Sources/ArgumentParser/Documentation.docc/Extensions/AsyncParsableCommand.md, Sources/ArgumentParser/Documentation.docc/Extensions/CommandConfiguration.md, Sources/ArgumentParser/Documentation.docc/Extensions/Option.md, Sources/ArgumentParser/Documentation.docc/Extensions/OptionGroup.md, Sources/ArgumentParser/Documentation.docc/Extensions/ParsableArguments.md, Sources/ArgumentParser/Documentation.docc/Extensions/ParsableCommand.md, Sources/ArgumentParser/Parsable Types/AsyncParsableCommand.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift",d7a5a794c5e04d6a48fb8d0caf58ba6affa8503e,,,
554e7659eb5b4dff97158d531aabecf11d546e2d,"Update changelog for the 1.1.0 release (#421)

Update changelog for 1.1.0 release",Nate Cook,natecook@apple.com,2022-03-15 01:34:11-05:00,18000,GitHub,noreply@github.com,2022-03-15 01:34:11-05:00,18000,True,False,11,57,46,1,main,CHANGELOG.md,d52044c091d2c02986dfd8c4ef183076ea2dc876,,,
055e0eaf8c6c992e595e093f2d282875feb16059,Fix broken links/incorrect variance calculation (#422),Nate Cook,natecook@apple.com,2022-03-15 12:05:09-05:00,18000,GitHub,noreply@github.com,2022-03-15 12:05:09-05:00,18000,True,False,4,5,1,3,main,"Examples/math/Math.swift, README.md, Sources/ArgumentParser/Documentation.docc/Articles/CommandsAndSubcommands.md",554e7659eb5b4dff97158d531aabecf11d546e2d,,,
7dd164a685f5410c8302780c9a59f526daddcdd0,"build: repair the build after #404 (#423)

This fixes the build with CMake after #404.",Saleem Abdulrasool,compnerd@compnerd.org,2022-03-15 14:02:18-07:00,25200,GitHub,noreply@github.com,2022-03-15 16:02:18-05:00,18000,True,False,2,2,0,1,main,Examples/CMakeLists.txt,055e0eaf8c6c992e595e093f2d282875feb16059,,,
777930b99df747c84a2c0f1390500374cfa0d9fb,"Remove platform requirement from Package.swift (#427)

Adding the platform requirement is a source breaking change; this moves
the requirement down to the `async` symbols instead.",Nate Cook,natecook@apple.com,2022-03-16 07:30:46-05:00,18000,GitHub,noreply@github.com,2022-03-16 07:30:46-05:00,18000,True,False,1,5,4,3,main,"Examples/count-lines/CountLines.swift, Package.swift, Sources/ArgumentParser/Parsable Types/AsyncParsableCommand.swift",7dd164a685f5410c8302780c9a59f526daddcdd0,0.0,1.0,1.0
b054991507a72695bdcd946ca32c35856bad5c8e,"build: complete the changes from #423 (#425)

This adds `-parse-as-library` to the example targets which use `@main`
resulting in a compile failure as `@main` is not processed unless the
target is marked as library.

Authored-by: Saleem Abdulrasool <compnerd@compnerd.org>",Saleem Abdulrasool,compnerd@compnerd.org,2022-03-16 05:49:48-07:00,25200,GitHub,noreply@github.com,2022-03-16 07:49:48-05:00,18000,True,False,0,4,4,1,main,Examples/CMakeLists.txt,777930b99df747c84a2c0f1390500374cfa0d9fb,,,
82905286cc3f0fa8adc4674bf49437cab65a8373,Update changelog for the 1.1.1 release (#428),Nate Cook,natecook@apple.com,2022-03-16 08:18:20-05:00,18000,GitHub,noreply@github.com,2022-03-16 08:18:20-05:00,18000,True,False,1,12,11,1,main,CHANGELOG.md,b054991507a72695bdcd946ca32c35856bad5c8e,,,
abe33fad69b7bd9f19c92ab7bbd3feb1482b5242,"build: statically link ArgumentParserToolInfo always (#424)

Now that windows supports static linking as well (to a certain degree),
alter the build of swift-argument-parser in CMake to use static linking
for ArgumentParserToolInfo always irrespective of whether ArgumentParser
is being built as a static library or a dynamic library.  On Windows, in
release mode, this saves ~32KiB.  Additionally, because no tool directly
links against this library, no binaries are further expanded by static
linking, and we have one less file to distribute.",Saleem Abdulrasool,compnerd@compnerd.org,2022-03-31 10:33:46-07:00,25200,GitHub,noreply@github.com,2022-03-31 12:33:46-05:00,18000,True,False,2,1,-1,1,main,Sources/ArgumentParserToolInfo/CMakeLists.txt,82905286cc3f0fa8adc4674bf49437cab65a8373,,,
18b003997399c3add1c803d90b8d4b4e01077f6a,"Fix Repeat's endless printing (#437)

Co-authored-by: Nate Cook <natecook@apple.com>",Kth,K2968220169@outlook.com,2022-04-03 04:13:09+08:00,-28800,GitHub,noreply@github.com,2022-04-02 15:13:09-05:00,18000,True,False,5,19,14,6,main,"Examples/repeat/Repeat.swift, README.md, Sources/ArgumentParser/Documentation.docc/ArgumentParser.md, Sources/ArgumentParser/Documentation.docc/Articles/CustomizingCommandHelp.md, Sources/ArgumentParser/Documentation.docc/Extensions/ParsableCommand.md, Tests/ArgumentParserExampleTests/RepeatExampleTests.swift",abe33fad69b7bd9f19c92ab7bbd3feb1482b5242,1.0,1.0,1.0
dd6efd05cbc1c4cb9026a8f28bdb69deaf8b26ee,Fix error message for @Option array without values (#435),Kth,K2968220169@outlook.com,2022-04-04 12:58:31+08:00,-28800,GitHub,noreply@github.com,2022-04-03 23:58:31-05:00,18000,True,False,1,30,29,3,main,"Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserUnitTests/ErrorMessageTests.swift",18b003997399c3add1c803d90b8d4b4e01077f6a,0.5833333333333334,0.5833333333333334,0.5833333333333334
f3c9084a71ef4376f2fabbdf1d3d90a49f1fabdb,Update changelog for 1.1.2 release (#441),Nate Cook,natecook@apple.com,2022-04-11 13:49:23-05:00,18000,GitHub,noreply@github.com,2022-04-11 13:49:23-05:00,18000,True,False,1,21,20,1,main,CHANGELOG.md,dd6efd05cbc1c4cb9026a8f28bdb69deaf8b26ee,,,
4f63cee9520fe34b4e064322881d72608b11197c,Hide hidden subcommands from completions (#443),Rauhul Varma,rauhul@users.noreply.github.com,2022-04-23 18:56:15-07:00,25200,GitHub,noreply@github.com,2022-04-23 18:56:15-07:00,25200,True,False,0,114,114,4,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Sources/ArgumentParser/Completions/ZshCompletionsGenerator.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",f3c9084a71ef4376f2fabbdf1d3d90a49f1fabdb,0.9090909090909091,0.9696969696969697,1.0
060d52364cf2a3e06b7adf0b17dbb7c33c77e1d3,"Remove LinuxMain.swift (#367)

Swift 5.5+ Swift Package Manager warns that `--enable-test-discovery` is
enabled by default. I assume for this project that should mean this
isn't needed anymore on `main`.",Keith Smiley,keithbsmiley@gmail.com,2022-05-11 12:10:01-07:00,25200,GitHub,noreply@github.com,2022-05-11 14:10:01-05:00,18000,True,False,19,0,-19,1,main,,4f63cee9520fe34b4e064322881d72608b11197c,,,
68b94a4c7341d9bbb11a5b882cd37ea4f1e5a508,"List valid options in error messages for enum array argument (#445)

When an array of argument values fails to parse, no custom error message is
provided, and a list of valid candidate values is available, include the
list as part of the error message.

Addresses #401.",konomae,konomae@users.noreply.github.com,2022-05-18 01:36:30+09:00,-32400,GitHub,noreply@github.com,2022-05-17 11:36:30-05:00,18000,True,False,16,44,28,2,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Tests/ArgumentParserUnitTests/ErrorMessageTests.swift",060d52364cf2a3e06b7adf0b17dbb7c33c77e1d3,0.0,1.0,1.0
78213f31921c537ba6896864057d1bf636714fb2,Improving edit distance string extension (#446),Luciano Almeida,passos.luciano@outlook.com,2022-06-05 00:26:16-03:00,10800,GitHub,noreply@github.com,2022-06-04 22:26:16-05:00,18000,True,False,19,80,61,2,main,"Sources/ArgumentParser/Utilities/StringExtensions.swift, Tests/ArgumentParserUnitTests/StringEditDistanceTests.swift",68b94a4c7341d9bbb11a5b882cd37ea4f1e5a508,0.11904761904761904,0.11904761904761904,1.0
48a799e04aaa81a246cfbfffceb87f6c01df02a8,"Add experimental manual page generation (#332)

- Adds a swift package manager command plugin called
  GenerateManualPlugin. The plugin can be invoked from the command line
  using `swift package experimental-generate-manual`. The plugin is
  prefixed for now with ""experimental-"" to indicate it is not mature and
  may see breaking changes to its CLI and output in the future. The
  plugin can be can be used to generate a manual in MDoc syntax for any
  swift-argument-parser tool that can be executed via
  `tool --experimental-dump-info`.
- The plugin works by converting the `ToolInfoV0` structure from the
  `ArgumentParserToolInfo` library into MDoc AST nodes using a custom
  (SwiftUI-esk) result builder DSL. The MDoc AST is then lowered to a
  string and written to disk.
- The MDoc AST included is not general purpose and doesn't represent the
  true language exactly, so it is private to the underlying
  `generate-manual` tool. In the future it would be interesting to
  finish fleshing out this MDoc library and spin it out, however this is
  not a priority.
- Next steps include:
  - Improving the command line interface for the plugin.
  - Adding support for ""extended discussions"" to Commands and exposing
    this information in manuals.
  - Further improve the escaping logic to properly escape MDoc macros
    that might happen to appear in user's help strings.
  - Ingesting external content a-la swift-docc so the entire tool
    documentation does not need to be included in the binary itself.
  - Bug fixes and addressing developer/user feedback.

Built with love,
@rauhul",Rauhul Varma,rauhul@users.noreply.github.com,2022-06-06 09:09:34-07:00,25200,GitHub,noreply@github.com,2022-06-06 11:09:34-05:00,18000,True,False,4,3771,3767,39,main,"Package.swift, Package@swift-5.6.swift, Plugins/GenerateManualPlugin/GenerateManualPlugin.swift, Plugins/GenerateManualPlugin/GenerateManualPluginError.swift, Plugins/GenerateManualPlugin/PackagePlugin+Helpers.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserGenerateManualTests/CountLinesGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/MathGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/RepeatGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/RollDiceGenerateManualTests.swift, Tools/generate-manual/AuthorArgument.swift, Tools/generate-manual/DSL/ArgumentSynopsis.swift, Tools/generate-manual/DSL/Author.swift, Tools/generate-manual/DSL/Authors.swift, Tools/generate-manual/DSL/Core/Container.swift, Tools/generate-manual/DSL/Core/Empty.swift, Tools/generate-manual/DSL/Core/ForEach.swift, Tools/generate-manual/DSL/Core/MDocASTNodeWrapper.swift, Tools/generate-manual/DSL/Core/MDocBuilder.swift, Tools/generate-manual/DSL/Core/MDocComponent.swift, Tools/generate-manual/DSL/Document.swift, Tools/generate-manual/DSL/DocumentDate.swift, Tools/generate-manual/DSL/Exit.swift, Tools/generate-manual/DSL/List.swift, Tools/generate-manual/DSL/MultiPageDescription.swift, Tools/generate-manual/DSL/Name.swift, Tools/generate-manual/DSL/Preamble.swift, Tools/generate-manual/DSL/Section.swift, Tools/generate-manual/DSL/SeeAlso.swift, Tools/generate-manual/DSL/SinglePageDescription.swift, Tools/generate-manual/DSL/Synopsis.swift, Tools/generate-manual/Extensions/ArgumentParser+MDoc.swift, Tools/generate-manual/Extensions/Date+ExpressibleByArgument.swift, Tools/generate-manual/Extensions/Process+SimpleAPI.swift, Tools/generate-manual/GenerateManual.swift, Tools/generate-manual/MDoc/MDocASTNode.swift, Tools/generate-manual/MDoc/MDocMacro.swift, Tools/generate-manual/MDoc/MDocSerializationContext.swift, Tools/generate-manual/MDoc/String+Escaping.swift",78213f31921c537ba6896864057d1bf636714fb2,0.2673010380622837,0.8866782006920415,0.9749134948096886
c61fc0f7f0b10fbbdbdc7e0b31cf1b7f8fd35ea0,Fix `AsyncParseableCommand` hierarchy (#436),Kth,K2968220169@outlook.com,2022-06-14 01:50:43+08:00,-28800,GitHub,noreply@github.com,2022-06-13 12:50:43-05:00,18000,True,False,2,32,30,2,main,"Sources/ArgumentParser/Parsable Types/AsyncParsableCommand.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift",48a799e04aaa81a246cfbfffceb87f6c01df02a8,0.0,1.0,1.0
975b435592908a66240a080bde57dc4e746c0556,Fix invalid link in docs (#440),Kth,K2968220169@outlook.com,2022-06-24 02:06:58+08:00,-28800,GitHub,noreply@github.com,2022-06-23 13:06:58-05:00,18000,True,False,1,3,2,2,main,"Sources/ArgumentParser/Documentation.docc/ArgumentParser.md, Sources/ArgumentParser/Documentation.docc/Articles/ManualParsing.md",c61fc0f7f0b10fbbdbdc7e0b31cf1b7f8fd35ea0,,,
df9ee6676cd5b3bf5b330ec7568a5644f547201b,Changelog entry for release 1.1.3 (#452),Nate Cook,natecook@apple.com,2022-06-23 13:28:27-05:00,18000,GitHub,noreply@github.com,2022-06-23 13:28:27-05:00,18000,True,False,1,28,27,1,main,CHANGELOG.md,975b435592908a66240a080bde57dc4e746c0556,,,
898d1ae9dd7d9ff9af39e66bea744d52f69df2e3,"fix: 🐛 Declare `GenerateManualPlugin` as plugin product (#456)

`ArgumentParser` 1.1.3 includes a SwiftPM plugin for generating man
pages. However, this plugin is not visible to packages that declare
`ArgumentParser` as a package dependency.

Defining a product of type `plugin` in the package manifest will solve
that. Running `swift package plugin --list` for a package, that
declares `ArgumentParser` as a package dependency, will then list the
`GenerateManualPlugin`

```
‘experimental-generate-manual’ (plugin ‘GenerateManualPlugin’ in package ‘swift-argument-parser’)
```

Closes: #455",Marco Eidinger,eidingermarco@gmail.com,2022-08-13 14:01:02-07:00,25200,GitHub,noreply@github.com,2022-08-13 14:01:02-07:00,25200,True,False,0,3,3,1,main,Package@swift-5.6.swift,df9ee6676cd5b3bf5b330ec7568a5644f547201b,,,
4b93f3ecb32a55f1f8c99171316a2061ae0c5860,"Fix generate-manual plugin authors argument (#471)

- Fixes an issue where the --author option was passed without its value
  by the generate-manual plugin to the generate-manual tool resulting in
  plugin invocation failures or incorrect author information.",Rauhul Varma,rauhul@users.noreply.github.com,2022-08-25 09:47:57-07:00,25200,GitHub,noreply@github.com,2022-08-25 09:47:57-07:00,25200,True,False,13,44,31,9,main,"Plugins/GenerateManualPlugin/GenerateManualPlugin.swift, Plugins/GenerateManualPlugin/GenerateManualPluginError.swift, Tests/ArgumentParserGenerateManualTests/CountLinesGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/MathGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/RepeatGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/RollDiceGenerateManualTests.swift, Tools/generate-manual/DSL/Authors.swift, Tools/generate-manual/DSL/Core/ForEach.swift, Tools/generate-manual/DSL/SeeAlso.swift",898d1ae9dd7d9ff9af39e66bea744d52f69df2e3,0.0,1.0,1.0
e978a3831f217f5e5cb65f218ef8665d535b13d7,"Default to single page manuals (#472)

- Changes the generate-manual --single-page argument to --multi-page, so
  generate-manual with create a single manual page with all subcommand
  information by default instead of many distinct files.",Rauhul Varma,rauhul@users.noreply.github.com,2022-08-26 00:03:35-07:00,25200,GitHub,noreply@github.com,2022-08-26 00:03:35-07:00,25200,True,False,21,21,0,7,main,"Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserGenerateManualTests/CountLinesGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/MathGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/RepeatGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/RollDiceGenerateManualTests.swift, Tools/generate-manual/DSL/Document.swift, Tools/generate-manual/GenerateManual.swift",4b93f3ecb32a55f1f8c99171316a2061ae0c5860,,,
b1b0595a966e9b5851ad80e8c0c9e34a86df2abc,"Fix missing option value names in manuals (#473)

- Fixes a manual generation bug where options in the synopsis were not
  given a value name and flags were.",Rauhul Varma,rauhul@users.noreply.github.com,2022-08-26 00:08:04-07:00,25200,GitHub,noreply@github.com,2022-08-26 00:08:04-07:00,25200,True,False,50,50,0,5,main,"Tests/ArgumentParserGenerateManualTests/CountLinesGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/MathGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/RepeatGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/RollDiceGenerateManualTests.swift, Tools/generate-manual/DSL/ArgumentSynopsis.swift",e978a3831f217f5e5cb65f218ef8665d535b13d7,,,
f1c6afd1754f2e0cca080a712c7a5cb14596f98c,"Fixup help options for built-in flags (#474)

- Fixes a bug where built-in flags such as --help and --version were not
  properly marked with isOptional which resulted in them appearing in
  generated content (such as completion scripts and manuals) as required
  arguments.",Rauhul Varma,rauhul@users.noreply.github.com,2022-08-26 00:13:12-07:00,25200,GitHub,noreply@github.com,2022-08-26 00:13:12-07:00,25200,True,False,51,58,7,6,main,"Sources/ArgumentParser/Usage/HelpGenerator.swift, Tests/ArgumentParserGenerateManualTests/CountLinesGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/MathGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/RepeatGenerateManualTests.swift, Tests/ArgumentParserGenerateManualTests/RollDiceGenerateManualTests.swift, Tests/ArgumentParserUnitTests/DumpHelpGenerationTests.swift",b1b0595a966e9b5851ad80e8c0c9e34a86df2abc,1.0,1.0,1.0
0672ff85bc0c7c241215d2344444e31361749d61,"Drop experimenal from generate-manual (#475)

- Removes the experimental prefix from the generate-manual plugin. The
  manual generation still is not mature, but we would like to avoid
  breaking adopters scripts by delaying changing the plugin's name in
  the future.",Rauhul Varma,rauhul@users.noreply.github.com,2022-08-26 00:15:45-07:00,25200,GitHub,noreply@github.com,2022-08-26 00:15:45-07:00,25200,True,False,1,1,0,1,main,Package@swift-5.6.swift,f1c6afd1754f2e0cca080a712c7a5cb14596f98c,,,
67fa3c00cdab00ca90977c82d59fce777ceb2e11,"Fix the defaultValueDescription for string enums (#476)

defaultValueDescription is always the enum case name, but that's not a
valid argument when the enum value differs from the case name. Extend
ExpressibleByArgument to use rawValue for defaultValueDescription for
string enums.",Ian,ianderson@mac.com,2022-08-26 16:49:30-07:00,25200,GitHub,noreply@github.com,2022-08-26 16:49:30-07:00,25200,True,False,5,59,54,3,main,"Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift, Tests/ArgumentParserUnitTests/DumpHelpGenerationTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",0672ff85bc0c7c241215d2344444e31361749d61,0.0,1.0,1.0
9f39744e025c7d377987f30b03770805dcb0bcd1,Update changelog for 1.1.4 release (#478),Rauhul Varma,rauhul@users.noreply.github.com,2022-08-26 20:30:47-07:00,25200,GitHub,noreply@github.com,2022-08-26 22:30:47-05:00,18000,True,False,3,50,47,1,main,CHANGELOG.md,67fa3c00cdab00ca90977c82d59fce777ceb2e11,,,
0bac2cc0f19b317642ffe0ebfb0b184626fa7603,"Allow default `nil` values for optional properties (#480)

This adds underscored initializers that let library users add `= nil` to
declarations of optional `@Option` and `@Argument` properties. Previously,
default values have been available for properties of non-optional types
only.

These new initializers use `_OptionalNilComparisonType` as the wrapped
value parameter, so only a `nil` literal is acceptable in the default
value position. This avoids the problem of declaring an optional property
with a non-`nil` default, which ends up negating the purpose of an optional.",Nate Cook,natecook@apple.com,2022-08-30 22:23:15-05:00,18000,GitHub,noreply@github.com,2022-08-30 22:23:15-05:00,18000,True,False,14,68,54,12,main,"Examples/count-lines/CountLines.swift, Examples/repeat/Repeat.swift, Examples/roll/main.swift, README.md, Sources/ArgumentParser/Documentation.docc/ArgumentParser.md, Sources/ArgumentParser/Documentation.docc/Articles/CustomizingCommandHelp.md, Sources/ArgumentParser/Documentation.docc/Extensions/ParsableCommand.md, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Tests/ArgumentParserEndToEndTests/FlagsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/OptionalEndToEndTests.swift",9f39744e025c7d377987f30b03770805dcb0bcd1,1.0,1.0,1.0
d7aa4401fe3705fcccf5f13f116c827a5cf19056,"Declare Hashable conformance for ArgumentVisibility (#481)

In addition to being useful, this allows us to drop the `@testable`
annotation for the ArgumentParser import in ArgumentParserTestHelpers,
which resolves #463.",Nate Cook,natecook@apple.com,2022-09-01 15:23:45-05:00,18000,GitHub,noreply@github.com,2022-09-01 15:23:45-05:00,18000,True,False,6,12,6,2,main,"Sources/ArgumentParser/Parsable Properties/ArgumentVisibility.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift",0bac2cc0f19b317642ffe0ebfb0b184626fa7603,,,
09106ba1ca5cc548769915f7d62471252edc9e31,"Add a validation message for an invalid decoder (#487)

If a ParsableArguments type doesn't implement init(from:) correctly,
it isn't decodable by the parser. This improves the validation
failure message for such types.",Nate Cook,natecook@apple.com,2022-09-09 15:12:31-05:00,18000,GitHub,noreply@github.com,2022-09-09 15:12:31-05:00,18000,True,False,17,79,62,2,main,"Sources/ArgumentParser/Parsable Types/ParsableArgumentsValidation.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift",d7aa4401fe3705fcccf5f13f116c827a5cf19056,0.06914893617021277,0.09042553191489362,1.0
607021b737e4381b0201b384f1f39d6b42e9b05c,"Unify @Argument and @Option initialization paths (#477)

- Fixes #466.
- Adds initializers to ArgumentDefinition generic over a Container type.
  The Container type must conform to a new internal protocol
  ArgumentDefinitionContainer which describes functionality like default
  set of help options for the argument defined by the property wrapper,
  etc.
- Adds overloads for Optional @Arguments and @Options with default
  values which emit deprecation warning to guide users towards using the
  non-Optional versions.",Rauhul Varma,rauhul@users.noreply.github.com,2022-09-10 16:40:31-07:00,25200,GitHub,noreply@github.com,2022-09-10 18:40:31-05:00,18000,True,False,705,1937,1232,16,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/ParserError.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserExampleTests/CountLinesExampleTests.swift, Tests/ArgumentParserGenerateManualTests/CountLinesGenerateManualTests.swift, Tests/ArgumentParserUnitTests/CMakeLists.txt, Tests/ArgumentParserUnitTests/HelpGenerationTests+AtArgument.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests+AtOption.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",09106ba1ca5cc548769915f7d62471252edc9e31,0.9668874172185431,1.0,1.0
7506042c65096b20b58f52f9690d7136005f36af,"Fix default display in help for `EnumerableFlag` and other types (#486)

In the help for flags like --prefix/--no-prefix, use the name of the
default flag instead of true/false. When EnumerableFlag types
have separate help strings, show the correct default flag name
on the default flag in the help.",Nate Cook,natecook@apple.com,2022-09-14 11:16:15-05:00,18000,GitHub,noreply@github.com,2022-09-14 11:16:15-05:00,18000,True,False,25,75,50,5,main,"Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Tests/ArgumentParserEndToEndTests/FlagsEndToEndTests.swift, Tests/ArgumentParserPackageManagerTests/HelpTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",607021b737e4381b0201b384f1f39d6b42e9b05c,0.0,1.0,1.0
841b8538e4ff1ef669b87aa213038a750c4c6bce,"Add an explicit return type to `flatMap` closure. (#490)

This restores the ability to build with versions of Swift prior to 5.7.",Tony Allevato,tony.allevato@gmail.com,2022-09-17 10:28:40-07:00,25200,GitHub,noreply@github.com,2022-09-17 12:28:40-05:00,18000,True,False,1,1,0,1,main,Sources/ArgumentParser/Parsable Properties/Flag.swift,7506042c65096b20b58f52f9690d7136005f36af,,,
774de9c40903f4b2ea454e9aad209f467fe53a63,"Fix help display for non-String RawRepresentables (#494)

RawRepresentable types that have a non-String raw value are having
values displayed in the help screen by converting the RawRep value
into a string. However, these values are by default parsed by their
raw value, so we should use that for display instead.

This is accomplished by adding a defaultValueDescription
implementation for all ExpressibleByArgument-conforming RawValue
types, and then basing the allValues implementation on that.
This generalizes the existing overloads for String-based RawRep types,
while also allowing users who customize their ExpressibleByArgument
implementation to provide the correct help value for clients.",Nate Cook,natecook@apple.com,2022-09-20 14:25:03-05:00,18000,GitHub,noreply@github.com,2022-09-20 14:25:03-05:00,18000,True,False,6,20,14,3,main,"Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift, Tests/ArgumentParserUnitTests/ErrorMessageTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",841b8538e4ff1ef669b87aa213038a750c4c6bce,0.0,1.0,1.0
587d26a2aa5d962b8845805378fa93b7c270d820,"Fixes incorrect value copying when ParseArguments has the same field name+type as the ParseCommand  (Issue #322) (#495)

* Contains fixes and test cases for #322",David Peterson,david@randombits.org,2022-09-23 00:43:48+10:00,-36000,GitHub,noreply@github.com,2022-09-22 09:43:48-05:00,18000,True,False,137,301,164,23,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Completions/CompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/NameSpecification.swift, Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsable Types/ParsableArgumentsValidation.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Parsing/ArgumentDecoder.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/InputKey.swift, Sources/ArgumentParser/Parsing/ParsedValues.swift, Sources/ArgumentParser/Usage/DumpHelpGenerator.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserEndToEndTests/OptionGroupEndToEndTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift, Tests/ArgumentParserUnitTests/NameSpecificationTests.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",774de9c40903f4b2ea454e9aad209f467fe53a63,0.9152542372881356,1.0,0.5423728813559322
d88d4de38b8a81d11503a10c073ac3ce570d9262,Revert README code sample to latest release (#498),Nate Cook,natecook@apple.com,2022-09-23 10:39:16-05:00,18000,GitHub,noreply@github.com,2022-09-23 10:39:16-05:00,18000,True,False,1,1,0,1,main,README.md,587d26a2aa5d962b8845805378fa93b7c270d820,,,
b80fb05f45cf85f609eef759e607f42a1180e513,"Add API for titling an option group (#492)

This change lets you provide a title for option groups, which is used
when generating the help screen. Titled option groups, when they exist,
are placed between the ARGUMENTS and OPTIONS section of the help.
Multiple option groups with the same title are coalesced into a single
group.

For example, this command declaration:

    struct Extras: ParsableArguments {
      @Flag(help: ""Print extra output while processing."")
      var verbose: Bool = false

      @Flag(help: ""Include details no one asked for."")
      var oversharing: Bool = false
    }

    @main
    struct Example: ParsableCommand {
      @OptionGroup(title: ""Extras"")
      var extras: Extras

      @Argument var name: String?
      @Option var title: String?
    }

yields this help screen:

    USAGE: example [--verbose] [--oversharing] [<name>] [--title <title>]

    ARGUMENTS:
      <name>

    EXTRAS:
      --verbose               Print extra output while processing.
      --oversharing           Include details no one asked for.

    OPTIONS:
      --title <title>
      -h, --help              Show help information.",Nate Cook,natecook@apple.com,2022-09-26 18:47:40-05:00,18000,GitHub,noreply@github.com,2022-09-26 18:47:40-05:00,18000,True,False,7,588,581,11,main,"Sources/ArgumentParser/Documentation.docc/Articles/CustomizingHelp.md, Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Usage/DumpHelpGenerator.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Utilities/CollectionExtensions.swift, Sources/ArgumentParser/Utilities/StringExtensions.swift, Sources/ArgumentParserToolInfo/ToolInfo.swift, Tests/ArgumentParserUnitTests/CMakeLists.txt, Tests/ArgumentParserUnitTests/DumpHelpGenerationTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests+GroupName.swift",d88d4de38b8a81d11503a10c073ac3ce570d9262,0.2711267605633803,0.9577464788732394,0.9366197183098591
a8b48bc389a246d074183b83caeb31254e973844,"Add two new `ArgumentArrayParsingStrategy` options (#496)

This adds two new parsing options for argument arrays, and renames
`.unconditionalRemaining` to `.captureForPassthrough`.

- `.allUnrecognized` collects all the inputs that weren't used during
parsing. This essentially suppresses all ""unrecognized flag/option""
and ""unexpected argument"" errors, and makes those extra inputs
available to the client.
- `.postTerminator` collects all inputs that follow the `--`
terminator, before trying to parse any other positional arguments.
This is a non-standard, but sometimes useful parsing strategy.",Nate Cook,natecook@apple.com,2022-10-07 16:18:52-05:00,18000,GitHub,noreply@github.com,2022-10-07 16:18:52-05:00,18000,True,False,144,470,326,8,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Tests/ArgumentParserEndToEndTests/CMakeLists.txt, Tests/ArgumentParserEndToEndTests/DefaultSubcommandEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/RepeatingEndToEndTests+ParsingStrategy.swift, Tests/ArgumentParserEndToEndTests/RepeatingEndToEndTests.swift",b80fb05f45cf85f609eef759e607f42a1180e513,0.22131147540983606,0.7377049180327869,0.9836065573770492
8a38c7ca5c23a9441373f2bf6f841da7d5ceac6c,build: repair the ArgumentParser build on main (#503),Saleem Abdulrasool,compnerd@compnerd.org,2022-10-09 11:12:09-07:00,25200,GitHub,noreply@github.com,2022-10-09 11:12:09-07:00,25200,True,False,0,1,1,1,main,Sources/ArgumentParser/CMakeLists.txt,a8b48bc389a246d074183b83caeb31254e973844,,,
3d6df7cf3747187f0fd29643c1165f5de5057567,[NFC] Sequester platform-specific code (#504),Nate Cook,natecook@apple.com,2022-10-10 17:50:20-05:00,18000,GitHub,noreply@github.com,2022-10-10 17:50:20-05:00,18000,True,False,106,159,53,6,main,"Sources/ArgumentParser/CMakeLists.txt, Sources/ArgumentParser/Completions/CompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/Errors.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Utilities/Platform.swift",8a38c7ca5c23a9441373f2bf6f841da7d5ceac6c,1.0,1.0,1.0
b99e170f1ccb94977f8edf68988863936132276e,"ArgumentParser: repair the build after #504 (#506)

There are references to functions from the Windows SDK rather than the C
library for the console handling.  Explicitly import the necessary types
and functions from the WinSDK module so that Windows can build once more
with the changes to sequester the platform specific code.",Saleem Abdulrasool,compnerd@compnerd.org,2022-10-12 10:45:51-07:00,25200,GitHub,noreply@github.com,2022-10-12 12:45:51-05:00,18000,True,False,0,4,4,1,main,Sources/ArgumentParser/Utilities/Platform.swift,3d6df7cf3747187f0fd29643c1165f5de5057567,,,
f8b5e7127cdeba6f54491603b8e23a5c8148fbf4,Update DocC curation for newest symbols (#507),Nate Cook,natecook@apple.com,2022-10-14 14:56:03-05:00,18000,GitHub,noreply@github.com,2022-10-14 14:56:03-05:00,18000,True,False,19,64,45,8,main,"Sources/ArgumentParser/Documentation.docc/Extensions/Argument.md, Sources/ArgumentParser/Documentation.docc/Extensions/ArgumentArrayParsingStrategy.md, Sources/ArgumentParser/Documentation.docc/Extensions/Flag.md, Sources/ArgumentParser/Documentation.docc/Extensions/Option.md, Sources/ArgumentParser/Documentation.docc/Extensions/OptionGroup.md, Sources/ArgumentParser/Documentation.docc/Extensions/ParsableArguments.md, Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift",b99e170f1ccb94977f8edf68988863936132276e,,,
76259ebe8c477ecc4e938d0831aea4c25f9ee3ee,Change name of plugin target to readable form (#505),Clay Ellis,clayellis@me.com,2022-10-18 12:50:55-05:00,18000,GitHub,noreply@github.com,2022-10-18 12:50:55-05:00,18000,True,False,3,4,1,1,main,Package@swift-5.6.swift,f8b5e7127cdeba6f54491603b8e23a5c8148fbf4,,,
3469a65d52ac95b00410456381bda145a03c3feb,Skip unsupported tests on Windows (#510),Nate Cook,natecook@apple.com,2022-10-26 10:37:54-05:00,18000,GitHub,noreply@github.com,2022-10-26 10:37:54-05:00,18000,True,False,0,11,11,1,main,Sources/ArgumentParserTestHelpers/TestHelpers.swift,76259ebe8c477ecc4e938d0831aea4c25f9ee3ee,,,
49e3214db963884d49e2a3e02997ad8ec5cb8d5d,"Fix 6 unresolved symbol links in documentation. (#511)

Also, remove no longer needed @Comment information about these links.",David Rönnqvist,david.ronnqvist@gmail.com,2022-10-28 11:36:39-07:00,25200,GitHub,noreply@github.com,2022-10-28 13:36:39-05:00,18000,True,False,33,5,-28,2,main,"Sources/ArgumentParser/Documentation.docc/Extensions/Argument.md, Sources/ArgumentParser/Documentation.docc/Extensions/Option.md",3469a65d52ac95b00410456381bda145a03c3feb,,,
90334086d94359fe8d1a0c4b347dcd4bef7f06a7,Fix error in ExpressibleByArgument docs (#512),Nate Cook,natecook@apple.com,2022-10-28 14:08:54-05:00,18000,GitHub,noreply@github.com,2022-10-28 14:08:54-05:00,18000,True,False,1,2,1,2,main,".gitignore, Sources/ArgumentParser/Parsable Types/ExpressibleByArgument.swift",49e3214db963884d49e2a3e02997ad8ec5cb8d5d,,,
4256f8848801c7341770d0c8d31ccc968c659c81,Document changing file name when adding @main (#514),Nate Cook,natecook@apple.com,2022-11-01 14:13:03-05:00,18000,GitHub,noreply@github.com,2022-11-01 14:13:03-05:00,18000,True,False,4,33,29,4,main,"Sources/ArgumentParser/Documentation.docc/Articles/CommandsAndSubcommands.md, Sources/ArgumentParser/Documentation.docc/Articles/GettingStarted.md, Sources/ArgumentParser/Documentation.docc/Extensions/AsyncParsableCommand.md, Sources/ArgumentParser/Documentation.docc/Extensions/ParsableCommand.md",90334086d94359fe8d1a0c4b347dcd4bef7f06a7,,,
5535a95838c6e9ef0e24c48a200a8faf879e418a,"Fix some Swift 5.6 compatibility issues (#516)

* Use existential CodingKey parameters consistently

Swift 5.7 supports implicit opening for existentials, so these
conversions from `CodingKey` parameters to pass to methods that
are generic over `CodingKey` work fine. Prior to Swift 5.7, however,
these don't compile, with the message that `CodingKey` doesn't conform
to itself.

* Bump the required Swift version for the count-lines test

The overload resolution for the `static func main()` in an `@main`
type still had issues in Swift 5.6, such that a package with a min.
platform below that which works for concurrency backdeployment doesn't
properly resolve the AsyncParsableCommand `main()` function. In
Swift 5.7, this is properly resolved, so just the availability on
the main type is sufficient.

This change just skips the test of `count-lines` prior to Swift 5.7,
so that we can maintain the open platform minimum for the package
as a whole.",Nate Cook,natecook@apple.com,2022-11-04 16:18:24-05:00,18000,GitHub,noreply@github.com,2022-11-04 16:18:24-05:00,18000,True,False,19,4,-15,4,main,".gitignore, Package.swift, Sources/ArgumentParser/Parsing/InputKey.swift, Tests/ArgumentParserExampleTests/CountLinesExampleTests.swift",4256f8848801c7341770d0c8d31ccc968c659c81,,,
fddd1c00396eed152c45a46bea9f47b98e59301d,"Update changelog for 1.2.0 release (#518)

Update changelog for 1.2.0 release and
update README code sample for latest version

Resolves #500.",Nate Cook,natecook@apple.com,2022-11-08 13:45:58-06:00,21600,GitHub,noreply@github.com,2022-11-08 13:45:58-06:00,21600,True,False,2,69,67,3,main,".gitignore, CHANGELOG.md, README.md",5535a95838c6e9ef0e24c48a200a8faf879e418a,,,
10ee916bac2fdc66cf592b5199f36eb12d4d1999,Add .spi.yml for Swift Package Index doc support (#519),Nate Cook,natecook@apple.com,2022-11-08 18:19:03-06:00,21600,GitHub,noreply@github.com,2022-11-08 18:19:03-06:00,21600,True,False,0,5,5,1,main,.spi.yml,fddd1c00396eed152c45a46bea9f47b98e59301d,,,
208594a75724c4b7d2a1e78597e3084af61e8f21,WASI: Fix Platform.exit (#520),Kenta Kubo,601636+kkk669@users.noreply.github.com,2022-11-15 00:42:12+09:00,-32400,GitHub,noreply@github.com,2022-11-14 09:42:12-06:00,21600,True,False,1,1,0,1,main,Sources/ArgumentParser/Utilities/Platform.swift,10ee916bac2fdc66cf592b5199f36eb12d4d1999,,,
8f9fa6fc9f32d721520176d6455467dfca8172cf,"Reword Enums to Remove ""Master"" (#521)

Co-authored-by: Rob Russo <robert_russo@apple.com>",Rob Russo,rrusso44@icloud.com,2022-11-15 10:30:40-08:00,28800,GitHub,noreply@github.com,2022-11-15 12:30:40-06:00,21600,True,False,5,5,0,1,main,Tests/ArgumentParserUnitTests/HelpGenerationTests.swift,208594a75724c4b7d2a1e78597e3084af61e8f21,,,
f94e4b995142f2dc83430af9521cb19997f703f1,"Disfavor deprecated property wrapper inits (#522)

This change is to make sure that the non-optional generic parameter
type is chosen for @Argument and @Option properties that provide a
default value. Previously, an optional type might be chosen depending
on how the `help` parameter was spelled, due to strange overload resolution.
In particular, using the `.init` caused selection of the deprecated
optional overload:

    // Unexpected:
    // Infers `Value` as `Optional<AbsolutePath>`
    @Argument(help: .init(""The path""))
    var path = AbsolutePath(""/"")

    // Expected:
    // Infers `Value` as `AbsolutePath`
    @Argument(help: ""The path"")
    var path = AbsolutePath(""/"")

This addresses the issue by marking the deprecated overloads as
disfavored. rdar://102383455",Nate Cook,natecook@apple.com,2022-11-16 09:30:27-06:00,21600,GitHub,noreply@github.com,2022-11-16 09:30:27-06:00,21600,True,False,7,46,39,3,main,"Sources/ArgumentParser/Parsable Properties/Argument.swift, Sources/ArgumentParser/Parsable Properties/Option.swift, Tests/ArgumentParserEndToEndTests/DefaultsEndToEndTests.swift",8f9fa6fc9f32d721520176d6455467dfca8172cf,0.05555555555555555,1.0,1.0
c5f71fd49fa40557c006f5158f50a0a02c219751,"Fix argument-parser versions in Documentation (#525)

- Updates README.md and GettingStarted.md to reference
  swift-argument-parser from: 1.2.0. Additionally, adds a minimum
  supported swift version table to README.md to guide users on older
  toolchains.",Rauhul Varma,rauhul@users.noreply.github.com,2022-11-21 22:19:05-08:00,28800,GitHub,noreply@github.com,2022-11-21 22:19:05-08:00,28800,True,False,4,14,10,2,main,"README.md, Sources/ArgumentParser/Documentation.docc/Articles/GettingStarted.md",f94e4b995142f2dc83430af9521cb19997f703f1,,,
e48e467b90322177bda55e6a10eb85cba9c8f227,"Fix deprecation warnings in unit tests (#526)

- Fixes deprecation warnings in unit tests by marking tests which cover
  deprecated functionality as @available(*, deprecated) themselves.",Rauhul Varma,rauhul@users.noreply.github.com,2022-11-21 22:24:42-08:00,28800,GitHub,noreply@github.com,2022-11-21 22:24:42-08:00,28800,True,False,0,2,2,2,main,"Tests/ArgumentParserUnitTests/HelpGenerationTests+AtArgument.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests+AtOption.swift",c5f71fd49fa40557c006f5158f50a0a02c219751,,,
e7f312e06e3de98aa28deb9e653e43d8e453d1e5,"Cleanup Foundation usage (#528)

- Changes uses of import Foundation in ArgumentParser to only expose the
  symbols needed to avoid growing unintentional dependencies.
- Replaces direct usage of EXIT_FAILURE in MessageInfo with ExitCode,
  exposed as a result of the above change.",Rauhul Varma,rauhul@users.noreply.github.com,2022-11-21 22:27:42-08:00,28800,GitHub,noreply@github.com,2022-11-21 22:27:42-08:00,28800,True,False,12,12,0,4,main,"Plugins/GenerateManualPlugin/GenerateManualPlugin.swift, Sources/ArgumentParser/Usage/DumpHelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift",e48e467b90322177bda55e6a10eb85cba9c8f227,0.6,0.4,0.0
bc29743b72c19c93c49e010d980725052c4569b3,"Update tests with easier to read diff output (#529)

- Renames AssertEqualStringsIgnoringTrailingWhitespace to
  AssertEqualStrings and updates the implementation to require matching
  trailing whitespace.
- Updates AssertEqualStrings to include much easier to read diff output
  when CollectionDifference is available. This should add developers
  when tests fail by providing more clear errors.",Rauhul Varma,rauhul@users.noreply.github.com,2022-11-21 22:29:52-08:00,28800,GitHub,noreply@github.com,2022-11-21 22:29:52-08:00,28800,True,False,30,101,71,3,main,"Sources/ArgumentParserTestHelpers/TestHelpers.swift, Tests/ArgumentParserEndToEndTests/SubcommandEndToEndTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift",e7f312e06e3de98aa28deb9e653e43d8e453d1e5,1.0,1.0,1.0
8f7e87bd0e0e1c96ae5d1622871820149b8e8c2d,"Partially revert ""Generate Manual"" target name (#527)

- The name of ""GenerateManualPlugin"" was changed to ""Generate Manual"" to
  improve the plugin's display name in Xcode. This however results in
  the `.pluginWorkDirectory` provided by SPM to include a space (' ') in
  the path. The space in the output path by itself is not a deal
  breaker, but unfortunately `man` (at least on macOS) does not properly
  handle path arguments with spaces. Example:

  ```shell
  ➜  swift package generate-manual
  ...
  Generating manual for roll...
  Generated manual in '.build/plugins/Generate Manual/outputs/roll'
  ...
  ➜  man '.build/plugins/Generate Manual/outputs/roll/roll.1'
  /usr/bin/man: line 413: cd: .build/plugins/Generate: No such file or \
    directory
  ```

  IMO, easily previewing the generating manual takes precedence over the
  UI in Xcode; as a result, this commit partially reverts the plugin's
  name to ""GenerateManual"" to hopefully provide a good middle ground of
  an output path without a space and a display name in Xcode that is a
  little easier on the eyes than ""GenerateManualPlugin"" was.",Rauhul Varma,rauhul@users.noreply.github.com,2022-11-21 22:46:34-08:00,28800,GitHub,noreply@github.com,2022-11-21 22:46:34-08:00,28800,True,False,5,4,-1,4,main,"Package@swift-5.6.swift, Plugins/GenerateManual/GenerateManualPlugin.swift, Plugins/GenerateManual/GenerateManualPluginError.swift, Plugins/GenerateManual/PackagePlugin+Helpers.swift",bc29743b72c19c93c49e010d980725052c4569b3,,,
83c0ef07c36676e7fd14c4fe373b13a81ed1b600,"Improved Project Status Section In Readme (#530)

* Improved Project Status Section In Readme",Ashkan Ebtekari,56440241+Chamepp@users.noreply.github.com,2022-12-11 01:11:02+03:18,-11880,GitHub,noreply@github.com,2022-12-10 15:53:02-06:00,21600,True,False,3,3,0,1,main,README.md,8f7e87bd0e0e1c96ae5d1622871820149b8e8c2d,,,
99e2e97fd9fda9ce07e02e845ad53c5e072b0756,"Improve fish completion (#376, #534) (#535)

A generated fish script didn't complete an option after an argument.

The cause is the generated fish script doesn't accept an input text which already has arguments.
For example, when the input is `repeat -`, the script can complete `--count`, but when the text is `repeat foo -`, the script cannot complete `repeat foo --count`, because the input text already has the argument ""foo"".

To fix the issue, `FishCompletionsGenerator` got a capability that can accept a text which has arguments.",matsuji,mtj0928@users.noreply.github.com,2023-01-10 01:55:41+09:00,-32400,GitHub,noreply@github.com,2023-01-09 10:55:41-06:00,21600,True,False,154,236,82,3,main,"Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift, Tests/ArgumentParserExampleTests/MathExampleTests.swift, Tests/ArgumentParserUnitTests/CompletionScriptTests.swift",83c0ef07c36676e7fd14c4fe373b13a81ed1b600,1.0,1.0,1.0
9f103e4e68c098e40773dca15bf46d5a69920167,Include more platforms in availability (#539),Nate Cook,natecook@apple.com,2023-01-09 11:11:22-06:00,21600,GitHub,noreply@github.com,2023-01-09 11:11:22-06:00,21600,True,False,1,1,0,1,main,Examples/count-lines/CountLines.swift,99e2e97fd9fda9ce07e02e845ad53c5e072b0756,,,
255ef663831e9f10cc7b5b6bf74b5708605084a3,"Change doc references (#532)

* Change doc references

Together with https://github.com/apple/swift-argument-parser/pull/531, updating GitHub pages references to those hosted by Swift Package Index.

* Change GitHub Pages reference to Swift Package Index",Yim Lee,yim_lee@apple.com,2023-01-09 09:17:53-08:00,28800,GitHub,noreply@github.com,2023-01-09 11:17:53-06:00,21600,True,False,4,4,0,2,main,"CHANGELOG.md, README.md",9f103e4e68c098e40773dca15bf46d5a69920167,,,
3b6f81459b60aa4c309a515c94f8a05176ef57b4,"Fix .postTerminator usage message (#542)

* Fix synopsis for .postTerminator parsing strategy

* Add test for .postTerminator usage message generation",Tiago Lopes,tiago.maia.lopes@gmail.com,2023-01-13 11:23:44-03:00,10800,GitHub,noreply@github.com,2023-01-13 08:23:44-06:00,21600,True,False,0,12,12,2,main,"Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",255ef663831e9f10cc7b5b6bf74b5708605084a3,1.0,1.0,1.0
846d1ad58ca935f40fe988ac5b46c90ec93ed4c5,Provide type annotation for multi-line closure (#543),Nate Cook,natecook@apple.com,2023-01-13 10:52:28-06:00,21600,GitHub,noreply@github.com,2023-01-13 10:52:28-06:00,21600,True,False,1,1,0,1,main,Sources/ArgumentParser/Completions/FishCompletionsGenerator.swift,3b6f81459b60aa4c309a515c94f8a05176ef57b4,,,
4ad606ba5d7673ea60679a61ff867cc1ff8c8e86,Update changelog for 1.2.1 release (#540),Nate Cook,natecook@apple.com,2023-01-13 13:15:14-06:00,21600,GitHub,noreply@github.com,2023-01-13 13:15:14-06:00,21600,True,False,1,33,32,1,main,CHANGELOG.md,846d1ad58ca935f40fe988ac5b46c90ec93ed4c5,,,
478c2df6ab904da9fe8bbc21210e2dd0c50e73c9,"Improve failure message for backdeployed AsyncParsableCommand (#547)

When an executable with asynchronous commands is backdeployed,
the compiler chooses the synchronous `main()` unless a minimum
availability target is provided for the root command type. This
changes the error message provided when the incorrect `main()`
function is called to direct the tool's author to a correct
solution.",Nate Cook,natecook@apple.com,2023-01-27 10:45:06-06:00,21600,GitHub,noreply@github.com,2023-01-27 10:45:06-06:00,21600,True,False,1,59,58,1,main,Sources/ArgumentParser/Parsable Types/ParsableCommand.swift,4ad606ba5d7673ea60679a61ff867cc1ff8c8e86,0.68,1.0,1.0
a9b9644153cb27806b16aff1594a84192dcd7e4c,"Stop removing underscores from CodingKey names in InputKey (#548)

When a property wrapper is applied to a property, the property's
storage is given a name with a prefixed underscore. That is,
for a property named `x`, the actual storage is named `_x`.

That prefixed storage is what is visible through reflection, so
when building an ArgumentSet from a command type's Mirror, we
need to remove the leading underscore. This is done when creating
an InputKey for each property.

However, InputKeys are also created from CodingKeys during
decoding of a ParsableCommand. These CodingKeys _do not_ have
the leading underscore that is visible, so any underscores
that appear are actually from the declaration of the property
with an underscored name. Removing leading underscores from
CodingKey names results in a mismatch when trying to find
the decoded value.

This change simplifies the InputKey type to use an array
path instead of an indirect enum and removes the leading
underscore dropping when creating an InputKey from a CodingKey.

rdar://104928743",Nate Cook,natecook@apple.com,2023-02-02 08:33:51-06:00,21600,GitHub,noreply@github.com,2023-02-02 08:33:51-06:00,21600,True,False,165,135,-30,21,main,"Sources/ArgumentParser/Completions/BashCompletionsGenerator.swift, Sources/ArgumentParser/Parsable Properties/Flag.swift, Sources/ArgumentParser/Parsable Properties/NameSpecification.swift, Sources/ArgumentParser/Parsable Properties/OptionGroup.swift, Sources/ArgumentParser/Parsable Types/ParsableArguments.swift, Sources/ArgumentParser/Parsable Types/ParsableArgumentsValidation.swift, Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Parsing/ArgumentDefinition.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/InputKey.swift, Sources/ArgumentParser/Usage/DumpHelpGenerator.swift, Sources/ArgumentParser/Usage/HelpGenerator.swift, Sources/ArgumentParser/Usage/MessageInfo.swift, Sources/ArgumentParser/Usage/UsageGenerator.swift, Tests/ArgumentParserEndToEndTests/DefaultsEndToEndTests.swift, Tests/ArgumentParserEndToEndTests/OptionGroupEndToEndTests.swift, Tests/ArgumentParserUnitTests/HelpGenerationTests.swift, Tests/ArgumentParserUnitTests/NameSpecificationTests.swift, Tests/ArgumentParserUnitTests/ParsableArgumentsValidationTests.swift, Tests/ArgumentParserUnitTests/UsageGenerationTests.swift",478c2df6ab904da9fe8bbc21210e2dd0c50e73c9,1.0,1.0,1.0
f674173291ef1dc5bd51f63175179ffb3f6a97fd,"Don't let .allUnrecognized consume built-in flags (#550)

Arguments declared with the `.allUnrecognized` parsing strategy
currently capture built-in flags, which isn't intended. This
fixes that issue by looking for built-in flags in the captured
portion of the input before decoding.

Fixes rdar://104990388",Nate Cook,natecook@apple.com,2023-02-08 21:02:46-08:00,28800,GitHub,noreply@github.com,2023-02-08 21:02:46-08:00,28800,True,False,275,332,57,6,main,"Sources/ArgumentParser/Parsable Types/ParsableCommand.swift, Sources/ArgumentParser/Parsing/ArgumentSet.swift, Sources/ArgumentParser/Parsing/CommandParser.swift, Sources/ArgumentParser/Parsing/ParsedValues.swift, Sources/ArgumentParser/Parsing/SplitArguments.swift, Tests/ArgumentParserEndToEndTests/RepeatingEndToEndTests+ParsingStrategy.swift",a9b9644153cb27806b16aff1594a84192dcd7e4c,1.0,1.0,1.0
fee6933f37fde9a5e12a1e4aeaa93fe60116ff2a,Update changelog for 1.2.2 release (#549),Nate Cook,natecook@apple.com,2023-02-09 09:25:51-08:00,28800,GitHub,noreply@github.com,2023-02-09 09:25:51-08:00,28800,True,False,1,17,16,1,main,CHANGELOG.md,f674173291ef1dc5bd51f63175179ffb3f6a97fd,,,
5649a380d7de5cb0bab087070a57c477bf6d652e,"Add subcommand abstracts to single-page manuals (#552)

- Fixes a bug where signle-page manuals did not include subcommand
  abstracts because the DSL logic did not take to account root commands
  vs subcommands. This change adds a ""root"" property to the DSL element
  to allow for styling differences in the two cases.",Rauhul Varma,rauhul@users.noreply.github.com,2023-02-14 21:54:42-08:00,28800,GitHub,noreply@github.com,2023-02-14 21:54:42-08:00,28800,True,False,2,17,15,3,main,"Tests/ArgumentParserGenerateManualTests/MathGenerateManualTests.swift, Tools/generate-manual/DSL/Document.swift, Tools/generate-manual/DSL/SinglePageDescription.swift",fee6933f37fde9a5e12a1e4aeaa93fe60116ff2a,0.0,1.0,1.0
c5050aa63ed5bb23209e7120b7ff6618ee06e0ee,"Handle unparsed non-optional complex property types (#554)

* Implement correct handling of unparsed property types which perform non-optional nested decoding.",Gwynne Raskind,gwynne@darkrainfall.org,2023-02-23 14:00:14-06:00,21600,GitHub,noreply@github.com,2023-02-23 14:00:14-06:00,21600,True,False,0,76,76,2,main,"Sources/ArgumentParser/Parsing/ArgumentDecoder.swift, Tests/ArgumentParserEndToEndTests/UnparsedValuesEndToEndTest.swift",5649a380d7de5cb0bab087070a57c477bf6d652e,1.0,1.0,1.0
